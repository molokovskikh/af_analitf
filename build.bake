import System
import System.IO
import System.Diagnostics
import System.Text
import file from Deploy.bake
import file from WebServiceSupport.bake
import file from Migration.bake
import file from Lib.bake
import file from Db.bake
import file from Test.bake
import file from Tools.bake
import file from Tools.boo


Global(
	Project : "AnalitF",
	humanReadableName : "AnalitF",
	deployTo : """\\adc.analit.net\Inforoom\WebApps\PrgDataService\Results\Updates""",
	Platform : "x86",
	ReleasesFolder : """\\OFFDC\Data\AnalitFReleases""",
	CurrentVersionInfo : null,
	PreviousRelease : null
)

def ExecWait(exec as Exec):
	exec.Execute()
	System.Threading.Thread.Sleep(450)

def PrepareCfg(buildName as string):
	File.Delete(".\\src\\AnalitF\\AnalitF_tmp.cfg") if File.Exists(".\\src\\AnalitF\\AnalitF_tmp.cfg")
	File.Move(".\\src\\AnalitF\\AnalitF.cfg", ".\\src\\AnalitF\\AnalitF_tmp.cfg")
	File.Copy(".\\src\\AnalitF\\AnalitF_${buildName}.cfg", ".\\src\\AnalitF\\AnalitF.cfg")
	Rm(FileSet("*.*", BaseDirectory : ".\\src\\AnalitF\\unit"))

def RestoreCfg():
	if (File.Exists(".\\src\\AnalitF\\AnalitF_tmp.cfg")):
		File.Delete(".\\src\\AnalitF\\AnalitF.cfg") if File.Exists(".\\src\\AnalitF\\AnalitF.cfg")
		File.Move(".\\src\\AnalitF\\AnalitF_tmp.cfg", ".\\src\\AnalitF\\AnalitF.cfg")

def BuildAnalitF(buildName as string):
	binFolder = ".\\src\\AnalitF\\bin"
	unitFolder = ".\\src\\AnalitF\\unit"
	MkDir(binFolder) if not Exist(binFolder)
	MkDir(unitFolder) if not Exist(unitFolder)
	buildFolder = ".\\src\\AnalitF\\bin\\bin${buildName}"
	Rm("${buildFolder}/*", true) if Exist(buildFolder)
	MkDir(buildFolder) if not Exist(buildFolder)
	try:
		PrepareCfg("Release")
		exec = Exec("dcc32.exe", "-B AnalitF.dpr", BaseDirectory : ".\\src\\AnalitF")
		ExecWait(exec)
	ensure:
		RestoreCfg()


Task @BuildVMProtect:
	exec = Exec("C:\\Program Files (x86)\\VMProtect Professional\\VMProtect_Con.exe", "AnalitF.exe -pf AnalitF.exe.vmp", BaseDirectory : ".\\src\\VMProtect")
	ExecWait(exec)

Task @BuildRelease:
	BuildAnalitF("Release")

Task @CopyReleaseToProtect:
	MkDir("src/VMProtect")
	File.Copy(".\\src\\AnalitF\\bin\\binRelease\\AnalitF.exe", ".\\src\\VMProtect\\AnalitF.exe", true)
	File.Copy(".\\src\\AnalitF\\bin\\binRelease\\AnalitF.map", ".\\src\\VMProtect\\AnalitF.map", true)

Task @BuildAndProtectRelease, [@BuildRelease, @CopyReleaseToProtect, @BuildVMProtect]:
	print "Сборка упакованного релизного приложения завершена"

Task @ShowDiffDataLayer:
	Sh("git log -10 -p \"src/Common/DataLayer/\"")

Task @ReadVersionInfo:
	Globals.CurrentVersionInfo = FileVersionInfo.GetVersionInfo(".\\src\\VMProtect\\AnalitF.vmp.exe")
	print "версия = ${Globals.CurrentVersionInfo.FileVersion}"

Task @CheckVersionInfo:
	if (not Globals.CurrentVersionInfo):
		raise "Не установлен номер версии собираемого релиза"
	if (Globals.CurrentVersionInfo.FilePrivatePart <= 0):
		raise "Номер билда версии собираемого релиза <= 0"

Task @CheckPrevVersion, [@CheckVersionInfo]:
	version = Convert.ToInt32(Configuration.prevVersion)
	if (version >= Globals.CurrentVersionInfo.FilePrivatePart):
		raise "Номер билда предыдущей версии ${version} больше или равен билду собираемой версии ${Globals.CurrentVersionInfo.FilePrivatePart}"
	if (not Globals.ReleasesFolder):
		raise "Не установлена папка с релизами"
	prevReleaseFolders = Directory.GetDirectories(Globals.ReleasesFolder, "*.${version}")
	if (prevReleaseFolders.Length > 1):
		raise "Найдено несколько папок для предыдущего релиза ${version}"
	if (prevReleaseFolders.Length == 0):
		raise "Не найдена папка с предыдущим релизом ${version}"
	prevReleaseFolder = Path.Combine(prevReleaseFolders[0], "Exe", "AnalitF")
	if (not Directory.Exists(prevReleaseFolder)):
		raise "Не найдена папка с файлами предыдущего релиза ${prevReleaseFolder}"
	Globals.PreviousRelease = prevReleaseFolder

Task @TestCheckPrevVersion, [@ReadVersionInfo, @CheckPrevVersion]


def CompareFiles(File1 as string, File2 as string) as bool:
	FI1 = FileInfo(File1)
	FI2 = FileInfo(File2)

	if (not FI1.Exists or not FI2.Exists):
		return false

	if (FI1.Length != FI2.Length):
		return false

	bytesFile1 = File.ReadAllBytes(File1)
	bytesFile2 = File.ReadAllBytes(File2)

	if (bytesFile1.Length != bytesFile2.Length):
		return false

	for i in range(0, bytesFile2.Length - 1):
		if (bytesFile1[i] != bytesFile2[i]):
			return false

	return true


def GetNewFiles(currentFolder as string, prevFolder as string):
	result = List()
	currentFiles = Directory.GetFiles(currentFolder, "*", SearchOption.AllDirectories)
	for file in currentFiles:
		prevFile = file.Replace(currentFolder, prevFolder)
		if (not CompareFiles(file, prevFile)):
			result.Add(file.Replace(currentFolder + "\\", ""))
	return result


Task @CreateReleaseFolder:
	buildNumber = Globals.CurrentVersionInfo.FilePrivatePart
	versionNumber = Globals.CurrentVersionInfo.FileVersion

	#подготовка каталога build
	buildRootFolder = ".\\build"
	Rm("${buildRootFolder}/*", true) if Exist(buildRootFolder)
	MkDir(buildRootFolder) if not Exist(buildRootFolder)

	#подготовка папок релиза
	archiveReleaseFolder = "${buildRootFolder}\\${versionNumber}\\Exe"
	exeReleaseFolder = "${buildRootFolder}\\${versionNumber}\\Exe\\AnalitF"
	updatesReleaseFolder = "${buildRootFolder}\\${versionNumber}\\updates\\Release${buildNumber}\\Exe"
	MkDir(exeReleaseFolder) if not Exist(exeReleaseFolder)
	MkDir(updatesReleaseFolder) if not Exist(updatesReleaseFolder)

	#копирование файлов в папки релиза
	Cp(FileSet("**\\*.*", BaseDirectory : ".\\release\\AnalitF"), exeReleaseFolder, true)
	File.Copy(".\\src\\VMProtect\\AnalitF.vmp.exe", exeReleaseFolder + "\\AnalitF.exe", true)
	File.Copy(".\\src\\EMKBuilds\\appdbhlp.dll", exeReleaseFolder + "\\appdbhlp.dll", true)
	Cp(FileSet("*.frf", BaseDirectory : ".\\src\\AnalitF"), exeReleaseFolder + "\\Frf", true)

	#поиск обновленных файлов
	updateFilesList = GetNewFiles(exeReleaseFolder, Globals.PreviousRelease)
	print "Список обновленных файлов (${updateFilesList.Count}) = ${join(updateFilesList)}"
	files = FileSet(updateFilesList, BaseDirectory : exeReleaseFolder)
	if (files.Files.Count != updateFilesList.Count):
		raise "Не совпало количество обновляемых файлов в FileSet = ${join(files.Files)}"

	#копирование обновленных файлов в папку ReleaseNNNN
	Cp(files, updatesReleaseFolder)

	#копирование обновленных файлов в папку вида .\update\{prev}_to_{currentBuild}
	updateSrc = ".\\update\\${Configuration.prevVersion}_to_${buildNumber}"
	Rm("${updateSrc}/*", true) if Exist(updateSrc)
	MkDir(updateSrc) if not Exist(updateSrc)
	Cp(files, updateSrc)

	#создание самораспаковывающегося архива
	exec = Exec("C:\\Program Files\\7-Zip\\7z.exe", "a AF${buildNumber}.exe AnalitF -mx9 -slp -sfx7z.sfx", BaseDirectory : archiveReleaseFolder)
	ExecWait(exec)

	print "папка с релизом подготовлена"


Task @TestCreateReleaseFolder, [@ReadVersionInfo, @CheckPrevVersion, @CreateReleaseFolder]


Task @DeployToFolders:
	#выкладываем файлы в папку на диске \\offdc\data
	Cp(FileSet("**\\*.*", BaseDirectory : ".\\build"), Globals.ReleasesFolder, true)
	#выкладываем файлы в обновление сервисе подготовки данных
	Cp(FileSet("**\\*.*", BaseDirectory : ".\\build\\${Globals.CurrentVersionInfo.FileVersion}\\updates"), Globals.deployTo, true)
	print "папка с релизом выложена"


Task @TestDeployToFolders, [@ReadVersionInfo, @CheckPrevVersion, @CreateReleaseFolder, @DeployToFolders]

Task @Deploy, [@BuildAndProtectRelease, @ReadVersionInfo, @CheckPrevVersion, @CreateReleaseFolder, @DeployToFolders]:
	print "Deploy упакованного релизного приложения завершен"

def UpdateConfigFile(configFile as string, installFolder as string):
	configContent = File.ReadAllText(configFile, Encoding.GetEncoding(1251))
	configContent = configContent.Replace("_installFolder_", "${installFolder}")
	File.WriteAllText("${installFolder}\\Borland\\Delphi7\\Bin\\${Path.GetFileName(configFile)}", configContent, Encoding.GetEncoding(1251))

def CopyDelphi(folder as string):
	MkDir(folder) if not Exist(folder)
	Cp(FileSet("**\\*.*", BaseDirectory : "\\\\offdc.adc.analit.net\\Drv\\Delphi7\\InstallFiles"), folder, true)
	Cp(FileSet("**\\*.*", BaseDirectory : "\\\\offdc.adc.analit.net\\Drv\\Delphi7\\UserFiles"), Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), true)
	configFiles = Directory.GetFiles(".\\InstallDelphi\\ConfigFiles")
	for file in configFiles:
		UpdateConfigFile(file, folder)
	print "копирование установочных файлов завершено"

def AddInstallFolderToPath(folder as string):
	path = Environment.GetEnvironmentVariable("Path", EnvironmentVariableTarget.Machine) + ";${folder}\\Borland\\Delphi7\\Bin;${folder}\\Borland\\Delphi7\\Projects\\Bpl\\;${folder}\\SystemLib\\"
	Environment.SetEnvironmentVariable("Path", path, EnvironmentVariableTarget.Machine)
	print "путь добавлен в Path"

def UpdateRegistry(installFolder as string):
	registryContent = File.ReadAllText(".\\InstallDelphi\\CurrentUserTemplateReg.txt", Encoding.GetEncoding(1200))
	installFolder = installFolder.Replace("\\", "\\\\")
	registryContent = registryContent.Replace("_installFolder_", "${installFolder}")
	File.WriteAllText(".\\InstallDelphi\\CurrentUser.reg", registryContent, Encoding.GetEncoding(1200))
	exec = Exec("regedit.exe", "/s .\\InstallDelphi\\CurrentUser.reg")
	ExecWait(exec)
	File.Delete(".\\InstallDelphi\\CurrentUser.reg")
	print "обновление реестра завершено успешно"

Task @InstallDelphi:
	installFolder = Configuration.installFolder
	currentFolder = Path.GetFullPath(".")
	#print "install Folder = ${installFolder}  currentFolder = ${currentFolder}"
	CopyDelphi(installFolder)
	AddInstallFolderToPath(installFolder)
	UpdateRegistry(installFolder)
	print "установка Delphi завершена успешно"
