/******************************************************************************/
/***          Generated by IBExpert 2005.06.21 08.08.2005 12:36:10          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

SET CLIENTLIB 'fbclient.dll';

CREATE DATABASE 'C:\Program Files\Firebird\ANALITF.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 4096
DEFAULT CHARACTER SET WIN1251;



/******************************************************************************/
/***                         User Defined Functions                         ***/
/******************************************************************************/

DECLARE EXTERNAL FUNCTION ADDMINUTE
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64ROUND
    NUMERIC(18,4) BY DESCRIPTOR,
    NUMERIC(18,4) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION LTRIM
    CSTRING(255) CHARACTER SET WIN1251
    RETURNS CSTRING(255) CHARACTER SET WIN1251 FREE_IT
    ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ROUND
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION RTRIM
    CSTRING(255) CHARACTER SET WIN1251
    RETURNS CSTRING(255) CHARACTER SET WIN1251 FREE_IT
    ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTRLEN
    CSTRING(255) CHARACTER SET WIN1251,
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) CHARACTER SET WIN1251 FREE_IT
    ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';




/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN FB_BOOLEAN AS
INTEGER
DEFAULT 0
NOT NULL
CHECK (VALUE IN (0, 1));

CREATE DOMAIN FB_ID AS
BIGINT
NOT NULL;

CREATE DOMAIN FB_REF AS
BIGINT;

CREATE DOMAIN FB_VC250 AS
VARCHAR(250) CHARACTER SET WIN1251;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE CATALOGCURRENCYDELET
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGCURRENCYINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGCURRENCYUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGSETFORMNOTNULL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGSHOWBYFORM (
    ASHORTCODE INTEGER)
RETURNS (
    FULLCODE INTEGER,
    FORM VARCHAR(252) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGSHOWBYNAME
RETURNS (
    ASHORTCODE INTEGER,
    NAME VARCHAR(252) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CATALOGUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CLIENTSDATANDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CLIENTSDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CLIENTSDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CLIENTSINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CLIENTSUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORECOUNTPRICEFIELDS (
    AREGIONCODE INTEGER,
    APRICECODE INTEGER)
RETURNS (
    CCOUNT INTEGER,
    CODE INTEGER,
    SYNONYMFIRM INTEGER,
    VOLUME INTEGER,
    DOC INTEGER,
    NOTE INTEGER,
    PERIOD INTEGER,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COREDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COREDELETEFORMHEADERS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COREDELETENEWPRICES
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COREDELETEOLDPRICES
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE COREINSERTFORMHEADERS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORESHOWBYFIRM (
    APRICECODE INTEGER,
    AREGIONCODE INTEGER,
    RETAILFORCOUNT INTEGER,
    ACLIENTID INTEGER)
RETURNS (
    COREID INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    DOC VARCHAR(20) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(250) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    MINPRICE INTEGER,
    LEADERPRICECODE INTEGER,
    LEADERREGIONCODE INTEGER,
    LEADERREGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    LEADERPRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSCODECR VARCHAR(20) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(250) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID SMALLINT,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORESHOWBYFORM (
    ACLIENTID SMALLINT,
    TIMEZONEBIAS INTEGER,
    PARENTCODE INTEGER,
    SHOWREGISTER CHAR(1) CHARACTER SET WIN1251,
    REGISTERID INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    SALE CHAR(1) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    PRICEENABLED INTEGER,
    FIRMCODE INTEGER,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE INTEGER,
    ORDERSCODECR INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CORESHOWBYNAME (
    ACLIENT SMALLINT,
    TIMEZONEBIAS INTEGER,
    PARENTCODE INTEGER,
    SHOWREGISTER CHAR(1) CHARACTER SET WIN1251,
    REGISTERID INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    SALE CHAR(1) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    PRICEENABLED INTEGER,
    FIRMCODE INTEGER,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE INTEGER,
    ORDERSCODECR INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DEFECTIVESDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DEFECTIVESINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE EXPIREDSSHOW (
    TIMEZONEBIAS INTEGER,
    ACLIENTID INTEGER,
    RETAILFORCOUNT INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID INTEGER,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSCODECR VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(100) CHARACTER SET WIN1251,
    PRICERET NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GETWAREDATA (
    AFULLCODE INTEGER,
    ACLIENTID SMALLINT)
RETURNS (
    NAME VARCHAR(252) CHARACTER SET WIN1251,
    FORM VARCHAR(252) CHARACTER SET WIN1251,
    PRICEAVG INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MINPRICESDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MINPRICESINSERT (
    ABASIC CHAR(1) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MINPRICESSETPRICECODE (
    ABASIC CHAR(1) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE NORMATIVESSHOW (
    APARTITION VARCHAR(30) CHARACTER SET WIN1251,
    ASHOWALL CHAR(1) CHARACTER SET WIN1251)
RETURNS (
    PARTITION VARCHAR(30) CHARACTER SET WIN1251,
    NAME VARCHAR(40) CHARACTER SET WIN1251,
    UPDATED INTEGER,
    FILENAME VARCHAR(8) CHARACTER SET WIN1251,
    TITLE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DATEDOC TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSDELETEEMPTY
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHDELETEEMPTY
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHDELETENOTCLOSED (
    ACLIENTID SMALLINT,
    APRICECODE INTEGER,
    AREGIONCODE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHDELETENOTCLOSEDALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHSHOW (
    ACLIENTID INTEGER,
    ACLOSED CHAR(1) CHARACTER SET WIN1251,
    TIMEZONEBIAS INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    DATEPRICE TIMESTAMP,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHSHOW1 (
    ACLIENTID SMALLINT,
    ACLOSED CHAR(1) CHARACTER SET WIN1251,
    TIMEZONEBIAS INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    DATEPRICE TIMESTAMP,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(24) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHSHOWCURRENT (
    ACLIENTID INTEGER,
    APRICECODE INTEGER,
    AREGIONCODE INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    CLIENTID SMALLINT,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSHSHOWSINGLE (
    AORDERID INTEGER)
RETURNS (
    ORDERID INTEGER,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSINFO1 (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERID INTEGER,
    POSITIONS INTEGER,
    SUMORDER INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSINFO2 (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERSCOUNT INTEGER,
    POSITIONS INTEGER,
    SUMORDER INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSSETCORENULL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSSHOW (
    AORDERID INTEGER)
RETURNS (
    ORDERID INTEGER,
    CLIENTID SMALLINT,
    COREID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    PRICE NUMERIC(18,4),
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    SUMORDER INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSSHOWBYCLIENT (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERID INTEGER,
    CLIENTID SMALLINT,
    COREID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    PRICE NUMERIC(18,4),
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSSHOWBYFORM (
    AFULLCODE INTEGER,
    ACLIENTID INTEGER)
RETURNS (
    FULLCODE INTEGER,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    PRICE NUMERIC(18,4),
    ORDERDATE TIMESTAMP,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ORDERSSHOWFORMSUMMARY (
    AFULLCODE INTEGER,
    ACLIENTID SMALLINT)
RETURNS (
    PRICEAVG INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PARAMSDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESDATADELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESDATAUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESREGIONALDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESREGIONALDATADELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESREGIONALDATAUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PRICESSHOW (
    ACLIENTID INTEGER,
    TIMEZONEBIAS INTEGER)
RETURNS (
    PRICECODE INTEGER,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    UPCOST DOUBLE PRECISION,
    MINREQ INTEGER,
    ENABLED CHAR(1) CHARACTER SET WIN1251,
    PRICEINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FIRMCODE INTEGER,
    FULLNAME VARCHAR(40) CHARACTER SET WIN1251,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    ADMINMAIL VARCHAR(35) CHARACTER SET WIN1251,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    CONTACTINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    OPERATIVEINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    REGIONCODE INTEGER,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    PRICESIZE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONALDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONALDATADELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONALDATAUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONSDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONSDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONSINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGIONSUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGISTRYDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REGISTRYINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SECTIONDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SECTIONDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SECTIONINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SECTIONUPDATE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SUMMARYHSHOW (
    ACLIENTID SMALLINT)
RETURNS (
    COUNTORDER INTEGER,
    SUMORDER INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SUMMARYSHOW (
    ACLIENTID SMALLINT,
    RETAILFORCOUNT INTEGER)
RETURNS (
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMDELETEFORMHEADERS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMFIRMCRDELETEALL
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMFIRMCRINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMINSERTALL
RETURNS (
    RES VARCHAR(11) CHARACTER SET WIN1251)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMINSERTFORMHEADERS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYNONYMINSERTUNFOUNDED
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TESTWAYBILLHEADINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TESTWAYBILLLISTINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCATALOGCURRENCYDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCATALOGCURRENCYINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCATALOGDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCATALOGINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCLIENTSDATANDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCLIENTSDATANINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCLIENTSDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPCLIENTSINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPPRICESDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPPRICESDATAINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPPRICESREGIONALDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPPRICESREGIONALDATAINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPREGIONALDATADELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPREGIONALDATAINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPREGIONSDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPREGIONSINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPSECTIONDELETE
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE TMPSECTIONINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WAYBILLHEADINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WAYBILLHEADSHOW (
    ACLIENTID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERORDERID INTEGER,
    WRITETIME TIMESTAMP,
    CLIENTID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    FIRMCOMMENT VARCHAR(100) CHARACTER SET WIN1251,
    ROWCOUNT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WAYBILLHEADSHOWCURRENT (
    ASERVERORDERID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERORDERID INTEGER,
    WRITETIME TIMESTAMP,
    CLIENTID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    FIRMCOMMENT VARCHAR(100) CHARACTER SET WIN1251,
    ROWCOUNT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WAYBILLLISTINSERT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WAYBILLLISTSHOW (
    AWAYBILLID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERWAYBILLID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    COST NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE CATALOG1 (
    FULLCODE   INTEGER NOT NULL,
    SHORTCODE  INTEGER NOT NULL,
    NAME       VARCHAR(252) CHARACTER SET WIN1251 NOT NULL,
    FORM       VARCHAR(252) CHARACTER SET WIN1251,
    SECTIONID  INTEGER,
    ATC4       VARCHAR(10) CHARACTER SET WIN1251,
    FTG        INTEGER,
    MNN        INTEGER
);

CREATE TABLE CATALOGCURRENCY (
    CURRENCY  VARCHAR(6) CHARACTER SET WIN1251 NOT NULL,
    EXCHANGE  NUMERIC(18,4) NOT NULL
);

CREATE TABLE CLIENTS (
    CLIENTID       SMALLINT NOT NULL,
    NAME           VARCHAR(50) CHARACTER SET WIN1251 NOT NULL,
    REGIONCODE     INTEGER,
    ADDRESS        VARCHAR(100) CHARACTER SET WIN1251,
    PHONE          VARCHAR(20) CHARACTER SET WIN1251,
    FORCOUNT       SMALLINT,
    EMAIL          VARCHAR(30) CHARACTER SET WIN1251,
    MAXUSERS       SMALLINT NOT NULL,
    USEEXCESS      CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    EXCESS         SMALLINT NOT NULL,
    DELTAMODE      SMALLINT,
    ONLYLEADERS    CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    REQMASK        INTEGER,
    TECHSUPPORT    VARCHAR(255) CHARACTER SET WIN1251,
    LEADFROMBASIC  SMALLINT
);

CREATE TABLE CLIENTSDATAN (
    FIRMCODE            INTEGER NOT NULL,
    FULLNAME            VARCHAR(40) CHARACTER SET WIN1251,
    FAX                 VARCHAR(20) CHARACTER SET WIN1251,
    PHONE               VARCHAR(20) CHARACTER SET WIN1251,
    MAIL                VARCHAR(50) CHARACTER SET WIN1251,
    ADDRESS             VARCHAR(100) CHARACTER SET WIN1251,
    BUSSSTOP            VARCHAR(100) CHARACTER SET WIN1251,
    URL                 VARCHAR(35) CHARACTER SET WIN1251,
    ORDERMANAGERNAME    VARCHAR(100) CHARACTER SET WIN1251,
    ORDERMANAGERPHONE   VARCHAR(35) CHARACTER SET WIN1251,
    ORDERMANAGERMAIL    VARCHAR(50) CHARACTER SET WIN1251,
    CLIENTMANAGERNAME   VARCHAR(100) CHARACTER SET WIN1251,
    CLIENTMANAGERPHONE  VARCHAR(35) CHARACTER SET WIN1251,
    CLIENTMANAGERMAIL   VARCHAR(50) CHARACTER SET WIN1251
);

CREATE TABLE CORE (
    COREID             INTEGER NOT NULL,
    PRICECODE          INTEGER,
    REGIONCODE         INTEGER,
    FULLCODE           INTEGER NOT NULL,
    SHORTCODE          INTEGER NOT NULL,
    CODEFIRMCR         INTEGER,
    SYNONYMCODE        INTEGER NOT NULL,
    SYNONYMFIRMCRCODE  INTEGER,
    CODE               VARCHAR(20) CHARACTER SET WIN1251,
    CODECR             VARCHAR(20) CHARACTER SET WIN1251,
    UNIT               VARCHAR(15) CHARACTER SET WIN1251,
    VOLUME             VARCHAR(15) CHARACTER SET WIN1251,
    JUNK               CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    AWAIT              CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    QUANTITY           VARCHAR(15) CHARACTER SET WIN1251,
    NOTE               VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD             VARCHAR(20) CHARACTER SET WIN1251,
    DOC                VARCHAR(20) CHARACTER SET WIN1251,
    BASECOST           NUMERIC(18,4)
);

CREATE TABLE DEFECTIVES (
    ID            INTEGER NOT NULL,
    NAME          VARCHAR(255) CHARACTER SET WIN1251 NOT NULL,
    PRODUCER      VARCHAR(150) CHARACTER SET WIN1251,
    COUNTRY       VARCHAR(150) CHARACTER SET WIN1251,
    SERIES        VARCHAR(50) CHARACTER SET WIN1251,
    LETTERNUMBER  VARCHAR(50) CHARACTER SET WIN1251,
    LETTERDATE    TIMESTAMP,
    LABORATORY    VARCHAR(200) CHARACTER SET WIN1251,
    REASON        VARCHAR(255) CHARACTER SET WIN1251,
    CHECKPRINT    CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE EXTSYNONYM EXTERNAL 'C:\WORK\FB\SYNONYM.TXT' (
    SYNONYMCODE  CHAR(11) CHARACTER SET WIN1251,
    SYNONYMNAME  CHAR(255) CHARACTER SET WIN1251,
    FULLCODE     CHAR(11) CHARACTER SET WIN1251,
    SHORTCODE    CHAR(11) CHARACTER SET WIN1251,
    PRICECODE    CHAR(11) CHARACTER SET WIN1251,
    NL           CHAR(2) CHARACTER SET WIN1251
);

CREATE TABLE FLAGS (
    COMPUTERNAME  VARCHAR(50) CHARACTER SET WIN1251,
    EXCLUSIVEID   VARCHAR(50) CHARACTER SET WIN1251
);

CREATE TABLE MINPRICES (
    FULLCODE    INTEGER NOT NULL,
    MINPRICE    NUMERIC(18,4) NOT NULL,
    PRICECODE   INTEGER,
    REGIONCODE  INTEGER
);

CREATE TABLE NORMATIVES (
    ID         INTEGER NOT NULL,
    PARTITION  VARCHAR(30) CHARACTER SET WIN1251,
    NAME       VARCHAR(40) CHARACTER SET WIN1251 NOT NULL,
    UPDATED    CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    FILENAME   VARCHAR(8) CHARACTER SET WIN1251,
    TITLE      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATEDOC    TIMESTAMP
);

CREATE TABLE ORDERS (
    ID                 INTEGER NOT NULL,
    ORDERID            INTEGER NOT NULL,
    CLIENTID           SMALLINT NOT NULL,
    COREID             INTEGER,
    FULLCODE           INTEGER NOT NULL,
    CODEFIRMCR         INTEGER,
    SYNONYMCODE        INTEGER,
    SYNONYMFIRMCRCODE  INTEGER,
    CODE               VARCHAR(20) CHARACTER SET WIN1251,
    CODECR             VARCHAR(20) CHARACTER SET WIN1251,
    SYNONYMNAME        VARCHAR(250) CHARACTER SET WIN1251,
    SYNONYMFIRM        VARCHAR(50) CHARACTER SET WIN1251,
    PRICE              NUMERIC(18,4) NOT NULL,
    AWAIT              CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    JUNK               CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    ORDERCOUNT         INTEGER NOT NULL
);

CREATE TABLE ORDERSH (
    ORDERID        INTEGER NOT NULL,
    SERVERORDERID  INTEGER,
    CLIENTID       SMALLINT NOT NULL,
    PRICECODE      INTEGER NOT NULL,
    REGIONCODE     INTEGER NOT NULL,
    PRICENAME      VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME     VARCHAR(25) CHARACTER SET WIN1251,
    ORDERDATE      TIMESTAMP,
    SENDDATE       TIMESTAMP,
    CLOSED         CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    SEND           CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    COMMENTS       VARCHAR(100) CHARACTER SET WIN1251,
    MESSAGETO      VARCHAR(100) CHARACTER SET WIN1251
);

CREATE TABLE PARAMS (
    ID                    SMALLINT NOT NULL,
    CLIENTID              SMALLINT,
    RASCONNECT            CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    RASENTRY              VARCHAR(30) CHARACTER SET WIN1251,
    RASNAME               VARCHAR(30) CHARACTER SET WIN1251,
    RASPASS               VARCHAR(30) CHARACTER SET WIN1251,
    CONNECTCOUNT          SMALLINT NOT NULL,
    CONNECTPAUSE          SMALLINT NOT NULL,
    PROXYCONNECT          CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    PROXYNAME             VARCHAR(30) CHARACTER SET WIN1251,
    PROXYPORT             SMALLINT,
    PROXYUSER             VARCHAR(30) CHARACTER SET WIN1251,
    PROXYPASS             VARCHAR(30) CHARACTER SET WIN1251,
    SERVICENAME           VARCHAR(50) CHARACTER SET WIN1251,
    HTTPHOST              VARCHAR(50) CHARACTER SET WIN1251,
    HTTPPORT              DOUBLE PRECISION,
    HTTPNAME              VARCHAR(30) CHARACTER SET WIN1251,
    HTTPPASS              VARCHAR(30) CHARACTER SET WIN1251,
    UPDATEDATETIME        TIMESTAMP,
    LASTDATETIME          TIMESTAMP,
    FASTPRINT             CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    SHOWREGISTER          CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    NEWWARES              CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    USEFORMS              CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    OPERATEFORMS          CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    OPERATEFORMSSET       CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    AUTOPRINT             CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    STARTPAGE             SMALLINT NOT NULL,
    LASTCOMPACT           TIMESTAMP,
    CUMULATIVE            CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    STARTED               CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    EXTERNALORDERSEXE     VARCHAR(255) CHARACTER SET WIN1251,
    EXTERNALORDERSPATH    VARCHAR(255) CHARACTER SET WIN1251,
    EXTERNALORDERSCREATE  CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    RASSLEEP              SMALLINT NOT NULL,
    HTTPNAMECHANGED       CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE PRICESDATA (
    FIRMCODE          INTEGER NOT NULL,
    PRICECODE         INTEGER NOT NULL,
    PRICENAME         VARCHAR(70) CHARACTER SET WIN1251,
    ALLOWINTEGR       CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    PRICEINFO         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATEPRICE         TIMESTAMP,
    FRESH             CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    PRICEFMT          VARCHAR(3) CHARACTER SET WIN1251,
    PRICEFILEDATE     TIMESTAMP,
    PATHTOPRICE       VARCHAR(255) CHARACTER SET WIN1251,
    DELIMITER         VARCHAR(3) CHARACTER SET WIN1251,
    PARENTSYNONYM     INTEGER,
    NAMEMASK          VARCHAR(255) CHARACTER SET WIN1251,
    FORBWORDS         VARCHAR(255) CHARACTER SET WIN1251,
    JUNKPOS           VARCHAR(10) CHARACTER SET WIN1251,
    AWAITPOS          VARCHAR(10) CHARACTER SET WIN1251,
    STARTLINE         INTEGER,
    LISTNAME          VARCHAR(50) CHARACTER SET WIN1251,
    TXTCODEBEGIN      SMALLINT,
    TXTCODEEND        SMALLINT,
    TXTCODECRBEGIN    SMALLINT,
    TXTCODECREND      SMALLINT,
    TXTNAMEBEGIN      SMALLINT,
    TXTNAMEEND        SMALLINT,
    TXTFIRMCRBEGIN    SMALLINT,
    TXTFIRMCREND      SMALLINT,
    TXTBASECOSTBEGIN  SMALLINT,
    TXTBASECOSTEND    SMALLINT,
    TXTUNITBEGIN      SMALLINT,
    TXTUNITEND        SMALLINT,
    TXTVOLUMEBEGIN    SMALLINT,
    TXTVOLUMEEND      SMALLINT,
    TXTQUANTITYBEGIN  SMALLINT,
    TXTQUANTITYEND    SMALLINT,
    TXTNOTEBEGIN      SMALLINT,
    TXTNOTEEND        SMALLINT,
    TXTPERIODBEGIN    SMALLINT,
    TXTPERIODEND      SMALLINT,
    TXTDOCBEGIN       SMALLINT,
    TXTDOCEND         SMALLINT,
    TXTJUNKBEGIN      SMALLINT,
    TXTJUNKEND        SMALLINT,
    TXTAWAITBEGIN     SMALLINT,
    TXTAWAITEND       SMALLINT,
    FCODE             VARCHAR(20) CHARACTER SET WIN1251,
    FCODECR           VARCHAR(20) CHARACTER SET WIN1251,
    FNAME1            VARCHAR(20) CHARACTER SET WIN1251,
    FNAME2            VARCHAR(20) CHARACTER SET WIN1251,
    FNAME3            VARCHAR(20) CHARACTER SET WIN1251,
    FFIRMCR           VARCHAR(20) CHARACTER SET WIN1251,
    FBASECOST         VARCHAR(20) CHARACTER SET WIN1251,
    FUNIT             VARCHAR(20) CHARACTER SET WIN1251,
    FVOLUME           VARCHAR(20) CHARACTER SET WIN1251,
    FQUANTITY         VARCHAR(20) CHARACTER SET WIN1251,
    FNOTE             VARCHAR(20) CHARACTER SET WIN1251,
    FPERIOD           VARCHAR(20) CHARACTER SET WIN1251,
    FDOC              VARCHAR(20) CHARACTER SET WIN1251,
    FJUNK             VARCHAR(20) CHARACTER SET WIN1251,
    FAWAIT            VARCHAR(20) CHARACTER SET WIN1251,
    PROTEK            CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE PRICESREGIONALDATA (
    PRICECODE   INTEGER NOT NULL,
    REGIONCODE  INTEGER NOT NULL,
    STORAGE     CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    UPCOST      DOUBLE PRECISION,
    MINREQ      INTEGER,
    ENABLED     CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE PROVIDER (
    ID          SMALLINT NOT NULL,
    NAME        VARCHAR(50) CHARACTER SET WIN1251 NOT NULL,
    ADDRESS     VARCHAR(30) CHARACTER SET WIN1251,
    PHONES      VARCHAR(30) CHARACTER SET WIN1251,
    EMAIL       VARCHAR(30) CHARACTER SET WIN1251,
    WEB         VARCHAR(30) CHARACTER SET WIN1251,
    MDBVERSION  SMALLINT
);

CREATE TABLE RECLAME (
    RECLAMEURL      VARCHAR(128) CHARACTER SET WIN1251,
    UPDATEDATETIME  TIMESTAMP
);

CREATE TABLE REGIONALDATA (
    FIRMCODE       INTEGER NOT NULL,
    REGIONCODE     INTEGER NOT NULL,
    SUPPORTPHONE   VARCHAR(20) CHARACTER SET WIN1251,
    ADMINMAIL      VARCHAR(35) CHARACTER SET WIN1251,
    CONTACTINFO    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OPERATIVEINFO  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE REGIONS (
    REGIONCODE  INTEGER NOT NULL,
    REGIONNAME  VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET    VARCHAR(254) CHARACTER SET WIN1251
);

CREATE TABLE REGISTRY (
    ID        INTEGER NOT NULL,
    NAME      VARCHAR(150) CHARACTER SET WIN1251 NOT NULL,
    FORM      VARCHAR(250) CHARACTER SET WIN1251,
    PRODUCER  VARCHAR(150) CHARACTER SET WIN1251,
    BOX       VARCHAR(10) CHARACTER SET WIN1251,
    PRICE     NUMERIC(18,4),
    CURR      VARCHAR(10) CHARACTER SET WIN1251,
    PRICERUB  NUMERIC(18,4)
);

CREATE TABLE SECTION1 (
    ID           INTEGER NOT NULL,
    SECTIONNAME  VARCHAR(50) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE SYNONYM (
    SYNONYMCODE  INTEGER NOT NULL,
    SYNONYMNAME  VARCHAR(250) CHARACTER SET WIN1251,
    FULLCODE     INTEGER,
    SHORTCODE    INTEGER,
    PRICECODE    INTEGER
);

CREATE TABLE SYNONYMFIRMCR (
    SYNONYMFIRMCRCODE  INTEGER NOT NULL,
    SYNONYMNAME        VARCHAR(252) CHARACTER SET WIN1251,
    PRICECODE          INTEGER
);

CREATE TABLE TABLESUPDATES (
    TABLENAME   VARCHAR(150) CHARACTER SET WIN1251,
    UPDATEDATE  TIMESTAMP
);

CREATE TABLE TMPCATALOG (
    FULLCODE   INTEGER NOT NULL,
    SHORTCODE  INTEGER NOT NULL,
    NAME       VARCHAR(255) CHARACTER SET WIN1251 NOT NULL,
    FORM       VARCHAR(255) CHARACTER SET WIN1251,
    SECTIONID  INTEGER,
    ATC4       VARCHAR(10) CHARACTER SET WIN1251,
    FTG        INTEGER,
    MNN        INTEGER
);

CREATE TABLE TMPCATALOGCURRENCY (
    CURRENCY  VARCHAR(6) CHARACTER SET WIN1251 NOT NULL,
    EXCHANGE  NUMERIC(18,4) NOT NULL
);

CREATE TABLE TMPCLIENTS (
    CLIENTID       SMALLINT NOT NULL,
    NAME           VARCHAR(50) CHARACTER SET WIN1251 NOT NULL,
    REGIONCODE     INTEGER,
    ADDRESS        VARCHAR(100) CHARACTER SET WIN1251,
    PHONE          VARCHAR(50) CHARACTER SET WIN1251,
    FORCOUNT       SMALLINT,
    EMAIL          VARCHAR(30) CHARACTER SET WIN1251,
    MAXUSERS       SMALLINT NOT NULL,
    USEEXCESS      CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    EXCESS         SMALLINT NOT NULL,
    DELTAMODE      SMALLINT,
    ONLYLEADERS    CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    REQMASK        INTEGER,
    TECHSUPPORT    VARCHAR(255) CHARACTER SET WIN1251,
    LEADFROMBASIC  SMALLINT
);

CREATE TABLE TMPCLIENTSDATAN (
    FIRMCODE            INTEGER NOT NULL,
    FULLNAME            VARCHAR(40) CHARACTER SET WIN1251,
    FAX                 VARCHAR(20) CHARACTER SET WIN1251,
    PHONE               VARCHAR(20) CHARACTER SET WIN1251,
    MAIL                VARCHAR(50) CHARACTER SET WIN1251,
    ADDRESS             VARCHAR(100) CHARACTER SET WIN1251,
    BUSSSTOP            VARCHAR(100) CHARACTER SET WIN1251,
    URL                 VARCHAR(35) CHARACTER SET WIN1251,
    ORDERMANAGERNAME    VARCHAR(100) CHARACTER SET WIN1251,
    ORDERMANAGERPHONE   VARCHAR(35) CHARACTER SET WIN1251,
    ORDERMANAGERMAIL    VARCHAR(50) CHARACTER SET WIN1251,
    CLIENTMANAGERNAME   VARCHAR(100) CHARACTER SET WIN1251,
    CLIENTMANAGERPHONE  VARCHAR(35) CHARACTER SET WIN1251,
    CLIENTMANAGERMAIL   VARCHAR(50) CHARACTER SET WIN1251
);

CREATE TABLE TMPPRICESDATA (
    FIRMCODE          INTEGER NOT NULL,
    PRICECODE         INTEGER NOT NULL,
    PRICENAME         VARCHAR(70) CHARACTER SET WIN1251,
    ALLOWINTEGR       CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    PRICEINFO         BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATEPRICE         TIMESTAMP,
    FRESH             CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    PRICEFMT          VARCHAR(3) CHARACTER SET WIN1251,
    DELIMITER         VARCHAR(3) CHARACTER SET WIN1251,
    PARENTSYNONYM     INTEGER,
    NAMEMASK          VARCHAR(255) CHARACTER SET WIN1251,
    FORBWORDS         VARCHAR(255) CHARACTER SET WIN1251,
    JUNKPOS           VARCHAR(10) CHARACTER SET WIN1251,
    AWAITPOS          VARCHAR(10) CHARACTER SET WIN1251,
    STARTLINE         INTEGER,
    LISTNAME          VARCHAR(50) CHARACTER SET WIN1251,
    TXTCODEBEGIN      SMALLINT,
    TXTCODEEND        SMALLINT,
    TXTCODECRBEGIN    SMALLINT,
    TXTCODECREND      SMALLINT,
    TXTNAMEBEGIN      SMALLINT,
    TXTNAMEEND        SMALLINT,
    TXTFIRMCRBEGIN    SMALLINT,
    TXTFIRMCREND      SMALLINT,
    TXTBASECOSTBEGIN  SMALLINT,
    TXTBASECOSTEND    SMALLINT,
    TXTUNITBEGIN      SMALLINT,
    TXTUNITEND        SMALLINT,
    TXTVOLUMEBEGIN    SMALLINT,
    TXTVOLUMEEND      SMALLINT,
    TXTQUANTITYBEGIN  SMALLINT,
    TXTQUANTITYEND    SMALLINT,
    TXTNOTEBEGIN      SMALLINT,
    TXTNOTEEND        SMALLINT,
    TXTPERIODBEGIN    SMALLINT,
    TXTPERIODEND      SMALLINT,
    TXTDOCBEGIN       SMALLINT,
    TXTDOCEND         SMALLINT,
    TXTJUNKBEGIN      SMALLINT,
    TXTJUNKEND        SMALLINT,
    TXTAWAITBEGIN     SMALLINT,
    TXTAWAITEND       SMALLINT,
    FCODE             VARCHAR(20) CHARACTER SET WIN1251,
    FCODECR           VARCHAR(20) CHARACTER SET WIN1251,
    FNAME1            VARCHAR(20) CHARACTER SET WIN1251,
    FNAME2            VARCHAR(20) CHARACTER SET WIN1251,
    FNAME3            VARCHAR(20) CHARACTER SET WIN1251,
    FFIRMCR           VARCHAR(20) CHARACTER SET WIN1251,
    FBASECOST         VARCHAR(20) CHARACTER SET WIN1251,
    FUNIT             VARCHAR(20) CHARACTER SET WIN1251,
    FVOLUME           VARCHAR(20) CHARACTER SET WIN1251,
    FQUANTITY         VARCHAR(20) CHARACTER SET WIN1251,
    FNOTE             VARCHAR(20) CHARACTER SET WIN1251,
    FPERIOD           VARCHAR(20) CHARACTER SET WIN1251,
    FDOC              VARCHAR(20) CHARACTER SET WIN1251,
    FJUNK             VARCHAR(20) CHARACTER SET WIN1251,
    FAWAIT            VARCHAR(20) CHARACTER SET WIN1251,
    PROTEK            CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE TMPPRICESREGIONALDATA (
    PRICECODE   INTEGER NOT NULL,
    REGIONCODE  INTEGER NOT NULL,
    STORAGE     CHAR(1) CHARACTER SET WIN1251 NOT NULL,
    UPCOST      DOUBLE PRECISION,
    MINREQ      INTEGER,
    ENABLED     CHAR(1) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE TMPREGIONALDATA (
    FIRMCODE       INTEGER NOT NULL,
    REGIONCODE     INTEGER NOT NULL,
    SUPPORTPHONE   VARCHAR(20) CHARACTER SET WIN1251,
    ADMINMAIL      VARCHAR(35) CHARACTER SET WIN1251,
    CONTACTINFO    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OPERATIVEINFO  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE TMPREGIONS (
    REGIONCODE  INTEGER NOT NULL,
    REGIONNAME  VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET    VARCHAR(254) CHARACTER SET WIN1251
);

CREATE TABLE TMPSECTION (
    ID           INTEGER NOT NULL,
    SECTIONNAME  VARCHAR(50) CHARACTER SET WIN1251 NOT NULL
);

CREATE TABLE WAYBILLHEAD (
    SERVERID       INTEGER,
    SERVERORDERID  INTEGER,
    WRITETIME      TIMESTAMP,
    CLIENTID       INTEGER,
    PRICECODE      INTEGER,
    REGIONCODE     INTEGER,
    PRICENAME      VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME     VARCHAR(25) CHARACTER SET WIN1251,
    FIRMCOMMENT    VARCHAR(100) CHARACTER SET WIN1251,
    ROWCOUNT       SMALLINT
);

CREATE TABLE WAYBILLLIST (
    SERVERID           INTEGER,
    SERVERWAYBILLID    INTEGER,
    FULLCODE           INTEGER,
    CODEFIRMCR         INTEGER,
    SYNONYMCODE        INTEGER,
    SYNONYMFIRMCRCODE  INTEGER,
    SYNONYMNAME        VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM        VARCHAR(50) CHARACTER SET WIN1251,
    CODE               VARCHAR(50) CHARACTER SET WIN1251,
    CODECR             VARCHAR(50) CHARACTER SET WIN1251,
    QUANTITY           INTEGER,
    COST               NUMERIC(18,4)
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: TEST1 */
CREATE VIEW TEST1(
    CCUR,
    CEXC,
    TCUR,
    TEXC)
AS
select cc.currency, cc.exchange, tcc.currency, tcc.exchange  from catalogcurrency cc, tmpcatalogcurrency tcc
where cc.currency = tcc.currency
;




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE CATALOG1 ADD PRIMARY KEY (FULLCODE);
ALTER TABLE CATALOGCURRENCY ADD PRIMARY KEY (CURRENCY);
ALTER TABLE CLIENTS ADD PRIMARY KEY (CLIENTID);
ALTER TABLE CORE ADD PRIMARY KEY (COREID);
ALTER TABLE DEFECTIVES ADD PRIMARY KEY (ID);
ALTER TABLE NORMATIVES ADD PRIMARY KEY (ID);
ALTER TABLE ORDERSH ADD PRIMARY KEY (ORDERID);
ALTER TABLE PARAMS ADD PRIMARY KEY (ID);
ALTER TABLE PRICESDATA ADD PRIMARY KEY (PRICECODE);
ALTER TABLE REGIONS ADD CONSTRAINT PK_REGIONS PRIMARY KEY (REGIONCODE);
ALTER TABLE REGISTRY ADD PRIMARY KEY (ID);
ALTER TABLE SYNONYM ADD CONSTRAINT PK_SYNONYM PRIMARY KEY (SYNONYMCODE);
ALTER TABLE SYNONYMFIRMCR ADD CONSTRAINT PK_SYNONYMFIRMCR PRIMARY KEY (SYNONYMFIRMCRCODE);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE CORE ADD CONSTRAINT FK_FULLCODE FOREIGN KEY (FULLCODE) REFERENCES CATALOG1 (FULLCODE) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX FORM1 ON CATALOG1 (FORM);
CREATE INDEX NAME2 ON CATALOG1 (NAME);
CREATE INDEX SECTIONCATALOG3 ON CATALOG1 (SECTIONID);
CREATE INDEX SHORTCODE4 ON CATALOG1 (SHORTCODE);
CREATE INDEX CLIENTSREGIONCODE5 ON CLIENTS (REGIONCODE);
CREATE UNIQUE INDEX FIRMCODE6 ON CLIENTSDATAN (FIRMCODE);
CREATE INDEX CATALOGCORE7 ON CORE (FULLCODE);
CREATE INDEX CORECODECOST8 ON CORE (FULLCODE, BASECOST);
CREATE INDEX COREPRICECODE9 ON CORE (PRICECODE);
CREATE INDEX CORE_IDX1 ON CORE (SHORTCODE);
CREATE INDEX JUNK10 ON CORE (JUNK);
CREATE INDEX PRICESDATACORE11 ON CORE (PRICECODE);
CREATE INDEX REGIONSCORE12 ON CORE (REGIONCODE);
CREATE INDEX SYNONYMCORE13 ON CORE (SYNONYMCODE);
CREATE INDEX SYNONYMFIRMCRCORE14 ON CORE (SYNONYMFIRMCRCODE);
CREATE UNIQUE INDEX CATALOGMINPRICES15 ON MINPRICES (FULLCODE);
CREATE INDEX MINPRICESFIRMCODE16 ON MINPRICES (PRICECODE);
CREATE INDEX REGIONSMINPRICES17 ON MINPRICES (REGIONCODE);
CREATE INDEX CLIENTID18 ON ORDERS (CLIENTID);
CREATE INDEX CODEFIRMCR20 ON ORDERS (CODEFIRMCR);
CREATE INDEX ORDER21 ON ORDERS (ORDERCOUNT);
CREATE INDEX ORDERSCOREID22 ON ORDERS (COREID);
CREATE INDEX ORDERSFULLCODE23 ON ORDERS (FULLCODE);
CREATE INDEX ORDERSHORDERS24 ON ORDERS (ORDERID);
CREATE INDEX ORDERSSYNONYMCODE25 ON ORDERS (SYNONYMCODE);
CREATE INDEX ORDERSSYNONYMFIRMCRCODE26 ON ORDERS (SYNONYMFIRMCRCODE);
CREATE INDEX CLIENTID27 ON ORDERSH (CLIENTID);
CREATE INDEX ORDERSHPRICECODE29 ON ORDERSH (PRICECODE);
CREATE INDEX ORDERSHREGIONCODE30 ON ORDERSH (REGIONCODE);
CREATE INDEX FIRMCODE31 ON PRICESDATA (FIRMCODE);
CREATE INDEX PRICECODE32 ON PRICESDATA (PRICECODE);
CREATE INDEX REGIONCODE35 ON PRICESREGIONALDATA (REGIONCODE);
CREATE INDEX CLIENTSDATANREGIONALDATA37 ON REGIONALDATA (FIRMCODE);
CREATE INDEX REGIONCODE39 ON REGIONALDATA (REGIONCODE);
CREATE UNIQUE INDEX REGIONNAME41 ON REGIONS (REGIONNAME);
CREATE UNIQUE INDEX SECTION42 ON SECTION1 (SECTIONNAME);
CREATE INDEX CATALOGSYNONYM44 ON SYNONYM (FULLCODE);
ALTER INDEX CATALOGSYNONYM44 INACTIVE;
CREATE INDEX SYNONYM_IDX1 ON SYNONYM (SYNONYMNAME);


/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CATALOGCURRENCYDELET
AS
begin
DELETE FROM CatalogCurrency;
end
^

ALTER PROCEDURE CATALOGCURRENCYINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO CatalogCurrency
SELECT Currency, Exchange
FROM ExtCatalogCurrency ECC
WHERE Not Exists(SELECT Currency FROM CatalogCurrency WHERE Currency=ECC.Currency);';
end
^

ALTER PROCEDURE CATALOGCURRENCYUPDATE
AS
DECLARE VARIABLE CURRENCY VARCHAR(6) CHARACTER SET WIN1251;
DECLARE VARIABLE EXCHANGE NUMERIC(18,4);
begin
for select tcc.currency, tcc.exchange  from catalogcurrency cc, tmpcatalogcurrency tcc
where cc.currency = tcc.currency
into :currency, :exchange
do
 UPDATE CatalogCurrency CC
    SET CC.Exchange = :exchange
    where CC.Currency = :currency;
end
^

ALTER PROCEDURE CATALOGDELETE
AS
begin
DELETE FROM CATALOG1;
end
^

ALTER PROCEDURE CATALOGINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO CATALOG1
SELECT FullCode, ShortCode, Name, form,  SectionId, ATC4, FTG, MNN
FROM ExtCatalog EC
WHERE Not Exists(SELECT FullCode FROM CATALOG1 WHERE FullCode=EC.FullCode);';
end
^

ALTER PROCEDURE CATALOGSETFORMNOTNULL
AS
begin
UPDATE CATALOG1 SET Form = ''
WHERE Form IS Null;
end
^

ALTER PROCEDURE CATALOGSHOWBYFORM (
    ASHORTCODE INTEGER)
RETURNS (
    FULLCODE INTEGER,
    FORM VARCHAR(252) CHARACTER SET WIN1251)
AS
begin
FOR
SELECT DISTINCT CATALOG1.FullCode, CATALOG1.Form
FROM CATALOG1 INNER JOIN Core ON CATALOG1.FullCode=Core.FullCode
WHERE CATALOG1.ShortCode=:AShortCode
into  :FullCode,   :Form
do
  suspend;
end
^

ALTER PROCEDURE CATALOGSHOWBYNAME
RETURNS (
    ASHORTCODE INTEGER,
    NAME VARCHAR(252) CHARACTER SET WIN1251)
AS
begin
For SELECT DISTINCT CATALOG1.ShortCode AS AShortCode, CATALOG1.Name
FROM CATALOG1 --INNER JOIN Core ON CATALOG1.FullCode=Core.FullCode
where
exists(select * from core c where c.fullcode = catalog1.fullcode)ORDER BY CATALOG1.Name
into :ashortcode, :name
do
  suspend;
end
^

ALTER PROCEDURE CATALOGUPDATE
AS
DECLARE VARIABLE FULLCODE BIGINT;
DECLARE VARIABLE SHORTCODE BIGINT;
DECLARE VARIABLE NAME VARCHAR(250) CHARACTER SET WIN1251;
DECLARE VARIABLE FORM VARCHAR(250) CHARACTER SET WIN1251;
DECLARE VARIABLE SECTIONID BIGINT;
DECLARE VARIABLE ATC4 VARCHAR(10);
DECLARE VARIABLE FTG INTEGER;
DECLARE VARIABLE MNN INTEGER;
begin
for select tc.fullcode, tc.shortcode, tc.name, tc.form, tc.sectionid, tc.atc4, tc.ftg, tc.mnn from TmpCatalog TC
into :fullcode, :shortcode, :name, :form, :sectionid, :atc4, :ftg, :mnn
do
  update CATALOG1 C1
    SET ShortCode = :ShortCode,
         Name = :Name,
         Form = :Form,
         SectionId = :SectionId,
         ATC4 = :ATC4,
         FTG = :FTG,
         MNN = :MNN
     where c1.fullcode = :fullcode;
end
^

ALTER PROCEDURE CLIENTSDATANDELETEALL
AS
begin
DELETE FROM ClientsDataN;
end
^

ALTER PROCEDURE CLIENTSDELETE
AS
begin
  /* Procedure Text */ /*$$IBE$$ 
  suspend;
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE CLIENTSDELETEALL
AS
begin
DELETE FROM Clients;
end
^

ALTER PROCEDURE CLIENTSINSERT
AS
begin /*$$IBE$$ 
EXECUTE STATEMENT
'INSERT INTO Clients (
    ClientId,
    Name,
    RegionCode,
    Address,
    Phone,
    Forcount,
    MaxUsers, Excess, DeltaMode, ReqMask, TechSupport, LeadFromBasic )
SELECT ClientId,
    Name,
    RegionCode,
    Address,
    Phone,
    Forcount,
    MaxUsers, Excess, DeltaMode, ReqMask, TechSupport, LeadFromBasic
FROM ExtClients
WHERE NOT Exists(SELECT ClientId FROM Clients WHERE ClientId=ExtClients.ClientId);';
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE CLIENTSUPDATE
AS
DECLARE VARIABLE CLIENTID BIGINT;
DECLARE VARIABLE NAME VARCHAR(50);
DECLARE VARIABLE REGIONCODE BIGINT;
DECLARE VARIABLE ADDRESS VARCHAR(100);
DECLARE VARIABLE PHONE VARCHAR(20);
DECLARE VARIABLE MAXUSERS SMALLINT;
DECLARE VARIABLE EXCESS SMALLINT;
DECLARE VARIABLE DELTAMODE SMALLINT;
DECLARE VARIABLE REQMASK INTEGER;
DECLARE VARIABLE TECHSUPPORT VARCHAR(255);
DECLARE VARIABLE LEADFROMBASIC SMALLINT;
begin
for select tc.clientid, tc.name, tc.regioncode, tc.address, tc.phone,
           tc.maxusers, tc.excess, tc.deltamode, tc.reqmask, tc.techsupport,
           tc.leadfrombasic
    from tmpclients TC, clients c
    where
       c.clientid = tc.clientid
    into :clientid, :name, :regioncode, :address, :phone,
           :maxusers, :excess, :deltamode, :reqmask, :techsupport,
           :leadfrombasic
    do
UPDATE Clients C
    SET Name = :Name,
         RegionCode = :RegionCode,
         Address = :Address,
         Phone = :Phone,
         MaxUsers = :MaxUsers,
         Excess = :Excess,
         DeltaMode = :DeltaMode,
         ReqMask = :ReqMask,
         TechSupport = :TechSupport,
         LeadFromBasic = :LeadFromBasic
where C.ClientId = :ClientId;
end
^

ALTER PROCEDURE CORECOUNTPRICEFIELDS (
    AREGIONCODE INTEGER,
    APRICECODE INTEGER)
RETURNS (
    CCOUNT INTEGER,
    CODE INTEGER,
    SYNONYMFIRM INTEGER,
    VOLUME INTEGER,
    DOC INTEGER,
    NOTE INTEGER,
    PERIOD INTEGER,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251)
AS
begin
For SELECT Count(*) AS CCount,
    Count(Code) AS Code,
    Count(SynonymFirmCrCode) AS SynonymFirm,
    Count(Volume) AS Volume,
    Count(Doc) AS Doc,
    Count(Note) AS Note,
    Count(Period) AS Period,
    Count(Quantity) AS Quantity
FROM Core
WHERE PriceCode=:APriceCode AND RegionCode=:ARegionCode
into :CCount, :Code, :SynonymFirm, :Volume, :Doc, :Note, :Period, :Quantity
do
  suspend;
end
^

ALTER PROCEDURE COREDELETEALL
AS
begin
DELETE FROM Core;
end
^

ALTER PROCEDURE COREDELETEFORMHEADERS
AS
begin
DELETE FROM Core
WHERE SynonymCode<0;
end
^

ALTER PROCEDURE COREDELETENEWPRICES
AS
begin
EXECUTE STATEMENT 'DELETE
FROM Core
WHERE PriceCode IN (SELECT PriceCode FROM ExtPricesData WHERE Fresh=''1'');';
end
^

ALTER PROCEDURE COREDELETEOLDPRICES
AS
begin
DELETE FROM Core
WHERE NOT Exists(SELECT PriceCode, RegionCode FROM PricesRegionalData
WHERE PriceCode=Core.PriceCode AND RegionCode=Core.RegionCode);
end
^

ALTER PROCEDURE COREINSERTFORMHEADERS
AS
begin
INSERT INTO Core ( FullCode, ShortCode, SynonymCode )
SELECT DISTINCT CATALOG1.FullCode, CATALOG1.ShortCode, -CATALOG1.FullCode
FROM Core INNER JOIN CATALOG1 ON Core.FullCode=CATALOG1.FullCode;
end
^

ALTER PROCEDURE CORESHOWBYFIRM (
    APRICECODE INTEGER,
    AREGIONCODE INTEGER,
    RETAILFORCOUNT INTEGER,
    ACLIENTID INTEGER)
RETURNS (
    COREID INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    DOC VARCHAR(20) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(250) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    MINPRICE INTEGER,
    LEADERPRICECODE INTEGER,
    LEADERREGIONCODE INTEGER,
    LEADERREGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    LEADERPRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSCODECR VARCHAR(20) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(250) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID SMALLINT,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET NUMERIC(18,4))
AS
begin
for SELECT Core.CoreId AS CoreId,
    Core.FullCode,
    Core.ShortCode,
    Core.CodeFirmCr,
    Core.SynonymCode,
    Core.SynonymFirmCrCode,
    Core.Code,
    Core.CodeCr,
    Core.Volume,
    Core.Doc,
    Core.Note,
    Core.Period,
    Core.Await,
    Core.Junk,
    Core.BaseCost,
    Core.Quantity,
    Synonym.SynonymName,
    SynonymFirmCr.SynonymName AS SynonymFirm,
    MinPrices.MinPrice,
    MinPrices.PriceCode AS LeaderPriceCode,
    MinPrices.RegionCode AS LeaderRegionCode,
    Regions.RegionName AS LeaderRegionName,
    PricesData.PriceName AS LeaderPriceName,
    osbc.CoreId AS OrdersCoreId,
    osbc.OrderId AS OrdersOrderId,
    osbc.ClientId AS OrdersClientId,
    osbc.FullCode AS OrdersFullCode,
    osbc.CodeFirmCr AS OrdersCodeFirmCr,
    osbc.SynonymCode AS OrdersSynonymCode,
    osbc.SynonymFirmCrCode AS OrdersSynonymFirmCrCode,
    osbc.Code AS OrdersCode,
    osbc.CodeCr AS OrdersCodeCr,
    osbc.OrderCount,
    osbc.SynonymName AS OrdersSynonym,
    osbc.SynonymFirm AS OrdersSynonymFirm,
    osbc.Price AS OrdersPrice,
    osbc.Junk AS OrdersJunk,
    osbc.Await AS OrdersAwait,
    OrdersH.OrderId AS OrdersHOrderId,
    OrdersH.ClientId AS OrdersHClientId,
    OrdersH.PriceCode AS OrdersHPriceCode,
    OrdersH.RegionCode AS OrdersHRegionCode,
    OrdersH.PriceName AS OrdersHPriceName,
    OrdersH.RegionName AS OrdersHRegionName,
    CAST((Core.BaseCost*(1 + :RetailForcount/100)) as NUMERIC(18,4)) AS PriceRet

FROM Synonym,
    Core
    LEFT JOIN MinPrices ON Core.FullCode=MinPrices.FullCode
    LEFT JOIN PricesData ON MinPrices.PriceCode=PricesData.PriceCode
    LEFT JOIN Regions ON MinPrices.RegionCode=Regions.RegionCode
    LEFT JOIN SynonymFirmCr
    ON Core.SynonymFirmCrCode=SynonymFirmCr.SynonymFirmCrCode
    LEFT JOIN OrdersShowByClient(:AClientId) osbc ON Core.CoreId=osbc.CoreId
    LEFT JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
WHERE (Core.PriceCode=:APriceCode) And (Core.RegionCode=:ARegionCode)
AND Core.SynonymCode=Synonym.SynonymCode
ORDER BY Core.CoreId
into :CoreId,
    :FullCode,
    :ShortCode,
    :CodeFirmCr,
    :SynonymCode,
    :SynonymFirmCrCode,
    :Code,
    :CodeCr,
    :Volume,
    :Doc,
    :Note,
    :Period,
    :Await,
    :Junk,
    :BaseCost,
    :Quantity,
    :SynonymName,
    :SynonymFirm,
    :MinPrice,
    :LeaderPriceCode,
    :LeaderRegionCode,
    :LeaderRegionName,
    :LeaderPriceName,
    :OrdersCoreId,
    :OrdersOrderId,
    :OrdersClientId,
    :OrdersFullCode,
    :OrdersCodeFirmCr,
    :OrdersSynonymCode,
    :OrdersSynonymFirmCrCode,
    :OrdersCode,
    :OrdersCodeCr,
    :OrderCount,
    :OrdersSynonym,
    :OrdersSynonymFirm,
    :OrdersPrice,
    :OrdersJunk,
    :OrdersAwait,
    :OrdersHOrderId,
    :OrdersHClientId,
    :OrdersHPriceCode,
    :OrdersHRegionCode,
    :OrdersHPriceName,
    :OrdersHRegionName,
    :PriceRet
do
  suspend;
end
^

ALTER PROCEDURE CORESHOWBYFORM (
    ACLIENTID SMALLINT,
    TIMEZONEBIAS INTEGER,
    PARENTCODE INTEGER,
    SHOWREGISTER CHAR(1) CHARACTER SET WIN1251,
    REGISTERID INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    SALE CHAR(1) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    PRICEENABLED INTEGER,
    FIRMCODE INTEGER,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE INTEGER,
    ORDERSCODECR INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
begin
FOR SELECT Core.CoreId,
    Core.PriceCode,
    Core.RegionCode,
    Core.FullCode AS AFullCode,
    Core.ShortCode,
    Core.CodeFirmCr,
    Core.SynonymCode,
    Core.SynonymFirmCrCode,
    Core.Code,
    Core.CodeCr,
    Core.Period,
    '0' AS Sale,
    Core.Volume,
    Core.Note,
    Core.BaseCost,
    Core.Quantity,
    Core.Await,
    Core.Junk,
    Synonym.SynonymName,
    SynonymFirmCr.SynonymName AS SynonymFirm,
   (PricesData.DatePrice) AS DatePrice,
    PricesData.PriceName,
    Enabled AS PriceEnabled,
    ClientsDataN.FirmCode AS FirmCode,
    Storage,
    Regions.RegionName,
    osbc.CoreId AS OrdersCoreId,
    osbc.OrderId AS OrdersOrderId,
    osbc.ClientId AS OrdersClientId,
    osbc.FullCode AS OrdersFullCode,
    osbc.CodeFirmCr AS OrdersCodeFirmCr,
    osbc.SynonymCode AS OrdersSynonymCode,
    osbc.SynonymFirmCrCode AS OrdersSynonymFirmCrCode,
    osbc.Code AS OrdersCode,
    osbc.CodeCr AS OrdersCodeCr,
    osbc.OrderCount,
    osbc.SynonymName AS OrdersSynonym,
    osbc.SynonymFirm AS OrdersSynonymFirm,
    osbc.Price AS OrdersPrice,
    osbc.Junk AS OrdersJunk,
    osbc.Await AS OrdersAwait,
    OrdersH.OrderId AS OrdersHOrderId,
    OrdersH.ClientId AS OrdersHClientId,
    OrdersH.PriceCode AS OrdersHPriceCode,
    OrdersH.RegionCode AS OrdersHRegionCode,
    OrdersH.PriceName AS OrdersHPriceName,
    OrdersH.RegionName AS OrdersHRegionName
FROM
    Synonym,
    Core
    LEFT JOIN SynonymFirmCr ON Core.SynonymFirmCrCode=SynonymFirmCr.SynonymFirmCrCode
    LEFT JOIN PricesData ON Core.PriceCode=PricesData.PriceCode
    LEFT JOIN PricesRegionalData PRD ON (Core.RegionCode=PRD.RegionCode)
        AND (Core.PriceCode=PRD.PriceCode)
    LEFT JOIN ClientsDataN ON PricesData.FirmCode=ClientsDataN.FirmCode
    LEFT JOIN Regions ON Core.RegionCode=Regions.RegionCode
    LEFT JOIN OrdersShowByClient(:aclientid) osbc ON Core.CoreId=osbc.CoreId
    LEFT JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
WHERE (Core.FullCode=:ParentCode)
and Core.SynonymCode=Synonym.SynonymCode
And (:ShowRegister = '1' Or (ClientsDataN.FirmCode<>:RegisterId))
ORDER BY Core.FullCode, Core.BaseCost
into CoreId,
    :PriceCode,
    :RegionCode,
    :FullCode,
    :ShortCode,
    :CodeFirmCr,
    :SynonymCode,
    :SynonymFirmCrCode,
    :Code,
    :CodeCr,
    :Period,
    :Sale,
    :Volume,
    :Note,
    :BaseCost,
    :Quantity,
    :Await,
    :Junk,
    :SynonymName,
    :SynonymFirm,
    :DatePrice,
    :PriceName,
    :PriceEnabled,
    :FirmCode,
    :Storage,
    :RegionName,
    :OrdersCoreId,
    :OrdersOrderId,
    :OrdersClientId,
    :OrdersFullCode,
    :OrdersCodeFirmCr,
    :OrdersSynonymCode,
    :OrdersSynonymFirmCrCode,
    :OrdersCode,
    :OrdersCodeCr,
    :OrderCount,
    :OrdersSynonym,
    :OrdersSynonymFirm,
    :OrdersPrice,
    :OrdersJunk,
    :OrdersAwait,
    :OrdersHOrderId,
    :OrdersHClientId,
    :OrdersHPriceCode,
    :OrdersHRegionCode,
    :OrdersHPriceName,
    :OrdersHRegionName
do
  suspend;
end
^

ALTER PROCEDURE CORESHOWBYNAME (
    ACLIENT SMALLINT,
    TIMEZONEBIAS INTEGER,
    PARENTCODE INTEGER,
    SHOWREGISTER CHAR(1) CHARACTER SET WIN1251,
    REGISTERID INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    SHORTCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    SALE CHAR(1) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    PRICEENABLED INTEGER,
    FIRMCODE INTEGER,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID SMALLINT,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE INTEGER,
    ORDERSCODECR INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
begin
for SELECT Core.CoreId,
    Core.PriceCode,
    Core.RegionCode,
    Core.FullCode AS AFullCode,
    Core.ShortCode,
    Core.CodeFirmCr,
    Core.SynonymCode,
    Core.SynonymFirmCrCode,
    Core.Code,
    Core.CodeCr,
    Core.Period,
    '0' AS Sale,
    Core.Volume,
    Core.Note,
    Core.BaseCost,
    Core.Quantity,
    Core.Await,
    Core.Junk,
    Synonym.SynonymName,
    SynonymFirmCr.SynonymName AS SynonymFirm,
   (PricesData.DatePrice) AS DatePrice,
    PricesData.PriceName,
    Enabled AS PriceEnabled,
    ClientsDataN.FirmCode AS FirmCode,
    Storage,
    Regions.RegionName,
    osbc.CoreId AS OrdersCoreId,
    osbc.OrderId AS OrdersOrderId,
    osbc.ClientId AS OrdersClientId,
    osbc.FullCode AS OrdersFullCode,
    osbc.CodeFirmCr AS OrdersCodeFirmCr,
    osbc.SynonymCode AS OrdersSynonymCode,
    osbc.SynonymFirmCrCode AS OrdersSynonymFirmCrCode,
    osbc.Code AS OrdersCode,
    osbc.CodeCr AS OrdersCodeCr,
    osbc.OrderCount,
    osbc.SynonymName AS OrdersSynonym,
    osbc.SynonymFirm AS OrdersSynonymFirm,
    osbc.Price AS OrdersPrice,
    osbc.Junk AS OrdersJunk,
    osbc.Await AS OrdersAwait,
    OrdersH.OrderId AS OrdersHOrderId,
    OrdersH.ClientId AS OrdersHClientId,
    OrdersH.PriceCode AS OrdersHPriceCode,
    OrdersH.RegionCode AS OrdersHRegionCode,
    OrdersH.PriceName AS OrdersHPriceName,
    OrdersH.RegionName AS OrdersHRegionName
FROM
    Synonym,
    Core
    LEFT JOIN SynonymFirmCr ON Core.SynonymFirmCrCode=SynonymFirmCr.SynonymFirmCrCode
    LEFT JOIN PricesData ON Core.PriceCode=PricesData.PriceCode
    LEFT JOIN PricesRegionalData PRD ON (Core.RegionCode=PRD.RegionCode)
        AND (Core.PriceCode=PRD.PriceCode)
    LEFT JOIN ClientsDataN ON PricesData.FirmCode=ClientsDataN.FirmCode
    LEFT JOIN Regions ON Core.RegionCode=Regions.RegionCode
    LEFT JOIN OrdersShowByClient(:aclient) osbc ON Core.CoreId=osbc.CoreId
    LEFT JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
WHERE (Core.ShortCode=:ParentCode)
and Core.SynonymCode=Synonym.SynonymCode
And (:ShowRegister = '1' Or (ClientsDataN.FirmCode<>:RegisterId))
ORDER BY Core.FullCode, Core.BaseCost
into :CoreId,
    :PriceCode,
    :RegionCode,
    :FullCode,
    :ShortCode,
    :CodeFirmCr,
    :SynonymCode,
    :SynonymFirmCrCode,
    :Code,
    :CodeCr,
    :Period,
    :Sale,
    :Volume,
    :Note,
    :BaseCost,
    :Quantity,
    :Await,
    :Junk,
    :SynonymName,
    :SynonymFirm,
    :DatePrice,
    :PriceName,
    :PriceEnabled,
    :FirmCode,
    :Storage,
    :RegionName,
    :OrdersCoreId,
    :OrdersOrderId,
    :OrdersClientId,
    :OrdersFullCode,
    :OrdersCodeFirmCr,
    :OrdersSynonymCode,
    :OrdersSynonymFirmCrCode,
    :OrdersCode,
    :OrdersCodeCr,
    :OrderCount,
    :OrdersSynonym,
    :OrdersSynonymFirm,
    :OrdersPrice,
    :OrdersJunk,
    :OrdersAwait,
    :OrdersHOrderId,
    :OrdersHClientId,
    :OrdersHPriceCode,
    :OrdersHRegionCode,
    :OrdersHPriceName,
    :OrdersHRegionName
do
  suspend;
end
^

ALTER PROCEDURE DEFECTIVESDELETEALL
AS
begin
DELETE FROM Defectives;
end
^

ALTER PROCEDURE DEFECTIVESINSERT
AS
begin /*$$IBE$$ 
EXECUTE STATEMENT 'INSERT INTO Defectives ( Name, Producer, Country, Series, LetterNumber, LetterDate, Laboratory, Reason )
SELECT FullName, FirmCr, CountryCr, Series, LetterNo, LetterDate, LaboratoryName, CauseRejects
FROM ExtRejects;';
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE EXPIREDSSHOW (
    TIMEZONEBIAS INTEGER,
    ACLIENTID INTEGER,
    RETAILFORCOUNT INTEGER)
RETURNS (
    COREID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER,
    ORDERSCLIENTID INTEGER,
    ORDERSFULLCODE INTEGER,
    ORDERSCODEFIRMCR INTEGER,
    ORDERSSYNONYMCODE INTEGER,
    ORDERSSYNONYMFIRMCRCODE INTEGER,
    ORDERSCODE VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSCODECR VARCHAR(20) CHARACTER SET WIN1251,
    ORDERSSYNONYM VARCHAR(255) CHARACTER SET WIN1251,
    ORDERSSYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    ORDERSPRICE NUMERIC(18,4),
    ORDERSJUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERSAWAIT CHAR(1) CHARACTER SET WIN1251,
    ORDERSHORDERID INTEGER,
    ORDERSHCLIENTID INTEGER,
    ORDERSHPRICECODE INTEGER,
    ORDERSHREGIONCODE INTEGER,
    ORDERSHPRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    ORDERSHREGIONNAME VARCHAR(100) CHARACTER SET WIN1251,
    PRICERET NUMERIC(18,4))
AS
begin
for SELECT Core.CoreId,
    Core.PriceCode,
    Core.RegionCode,
    Core.FullCode,
    Core.CodeFirmCr,
    Core.SynonymCode,
    Core.SynonymFirmCrCode,
    Core.Code,
    Core.CodeCr,
    Core.Note,
    Core.Period,
    Core.Volume,
    Core.BaseCost,
    Core.Quantity,
    Synonym.SynonymName,
    SynonymFirmCr.SynonymName AS SynonymFirm,
    Core.Await,
    PricesData.PriceName,
    (PricesData.DatePrice - :TimeZoneBias/1440) AS DatePrice,
    Regions.RegionName,
    osbc.CoreId AS OrdersCoreId,
    osbc.OrderId AS OrdersOrderId,
    osbc.ClientId AS OrdersClientId,
    osbc.FullCode AS OrdersFullCode,
    osbc.CodeFirmCr AS OrdersCodeFirmCr,
    osbc.SynonymCode AS OrdersSynonymCode,
    osbc.SynonymFirmCrCode AS OrdersSynonymFirmCrCode,
    osbc.Code AS OrdersCode,
    osbc.CodeCr AS OrdersCodeCr,
    osbc.SynonymName AS OrdersSynonym,
    osbc.SynonymFirm AS OrdersSynonymFirm,
    osbc.OrderCount,
    osbc.Price AS OrdersPrice,
    osbc.Junk AS OrdersJunk,
    osbc.Await AS OrdersAwait,
    OrdersH.OrderId AS OrdersHOrderId,
    OrdersH.ClientId AS OrdersHClientId,
    OrdersH.PriceCode AS OrdersHPriceCode,
    OrdersH.RegionCode AS OrdersHRegionCode,
    OrdersH.PriceName AS OrdersHPriceName,
    OrdersH.RegionName AS OrdersHRegionName,
    cast((Core.BaseCost*(1 + :RetailForcount/100)) as NUMERIC(18,4)) AS PriceRet

FROM (((((Core INNER JOIN Synonym ON Core.SynonymCode=Synonym.SynonymCode)
    INNER JOIN PricesData ON Core.PriceCode=PricesData.PriceCode)
    INNER JOIN Regions ON Core.RegionCode=Regions.RegionCode)
    LEFT JOIN SynonymFirmCr ON Core.SynonymFirmCrCode=SynonymFirmCr.SynonymFirmCrCode)
    LEFT JOIN OrdersShowByClient(:AClientId) osbc ON osbc.CoreId=Core.CoreId)
    LEFT JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
WHERE Core.Junk = '1'
ORDER BY Synonym.SynonymName
into :CoreId,
    :PriceCode,
    :RegionCode,
    :FullCode,
    :CodeFirmCr,
    :SynonymCode,
    :SynonymFirmCrCode,
    :Code,
    :CodeCr,
    :Note,
    :Period,
    :Volume,
    :BaseCost,
    :Quantity,
    :SynonymName,
    :SynonymFirm,
    :Await,
    :PriceName,
    :DatePrice,
    :RegionName,
    :OrdersCoreId,
    :OrdersOrderId,
    :OrdersClientId,
    :OrdersFullCode,
    :OrdersCodeFirmCr,
    :OrdersSynonymCode,
    :OrdersSynonymFirmCrCode,
    :OrdersCode,
    :OrdersCodeCr,
    :OrdersSynonym,
    :OrdersSynonymFirm,
    :OrderCount,
    :OrdersPrice,
    :OrdersJunk,
    :OrdersAwait,
    :OrdersHOrderId,
    :OrdersHClientId,
    :OrdersHPriceCode,
    :OrdersHRegionCode,
    :OrdersHPriceName,
    :OrdersHRegionName,
    :PriceRet
do
  suspend;
end
^

ALTER PROCEDURE GETWAREDATA (
    AFULLCODE INTEGER,
    ACLIENTID SMALLINT)
RETURNS (
    NAME VARCHAR(252) CHARACTER SET WIN1251,
    FORM VARCHAR(252) CHARACTER SET WIN1251,
    PRICEAVG INTEGER)
AS
begin
for  SELECT
    CATALOG1.Name,
    CATALOG1.Form,
    Avg(osbc.Price) AS PriceAvg
   FROM
    (CATALOG1 LEFT JOIN OrdersShowByClient(:AClientId) osbc ON CATALOG1.FullCode=osbc.FullCode)
    LEFT JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
  WHERE
    (CATALOG1.FullCode=:AFullCode)
    And ( (OrdersH.Closed = '1') or (OrdersH.Closed Is Null) )
    And (( (current_date-OrdersH.OrderDate)<183) Or (OrdersH.OrderDate Is Null))
  GROUP BY CATALOG1.Name, CATALOG1.Form
  into
    :Name,
    :Form,
    :PriceAvg
do
  suspend;
end
^

ALTER PROCEDURE MINPRICESDELETE
AS
begin
DELETE FROM MinPrices;
end
^

ALTER PROCEDURE MINPRICESINSERT (
    ABASIC CHAR(1) CHARACTER SET WIN1251)
AS
begin
INSERT INTO MinPrices ( FullCode, MinPrice )
SELECT FullCode, Min(BaseCost)
FROM Core LEFT JOIN PricesRegionalData PRD ON Core.PriceCode=PRD.PriceCode
    AND Core.RegionCode=PRD.RegionCode  AND (:ABasic <> '1' OR PRD.Enabled = '1')
WHERE BaseCost>0 AND PRD.PriceCode IS NOT NULL
GROUP BY FullCode;

end
^

ALTER PROCEDURE MINPRICESSETPRICECODE (
    ABASIC CHAR(1) CHARACTER SET WIN1251)
AS
DECLARE VARIABLE FULLCODE INTEGER;
DECLARE VARIABLE BASECOST NUMERIC(18,4);
DECLARE VARIABLE PRICECODE INTEGER;
DECLARE VARIABLE REGIONCODE INTEGER;
begin
for
 select Core.FullCode, Core.BaseCost, PRD.Pricecode, PRD.RegionCode
from core, minprices, PricesRegionalData PRD
where
    Core.PriceCode=PRD.PriceCode
and Core.fullcode = minprices.fullcode
and Core.basecost = minprices.minprice
AND Core.RegionCode=PRD.RegionCode
AND (:ABasic <> '1' OR PRD.Enabled ='1')
into :fullcode, :basecost, :pricecode, :regioncode
do
  update MinPrices
  SET
    PriceCode = :pricecode,
    PriceCode = :regioncode
  where
    MinPrices.FullCode=:fullcode;

end
^

ALTER PROCEDURE NORMATIVESSHOW (
    APARTITION VARCHAR(30) CHARACTER SET WIN1251,
    ASHOWALL CHAR(1) CHARACTER SET WIN1251)
RETURNS (
    PARTITION VARCHAR(30) CHARACTER SET WIN1251,
    NAME VARCHAR(40) CHARACTER SET WIN1251,
    UPDATED INTEGER,
    FILENAME VARCHAR(8) CHARACTER SET WIN1251,
    TITLE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DATEDOC TIMESTAMP)
AS
begin
IF (:AShowAll = '1')
THEN
    for SELECT Partition,
        Name,
        Updated,
        FileName,
        Title,
        DateDoc
    FROM Normatives
    ORDER BY current_date desc
    into :Partition,
        :Name,
        :Updated,
        :FileName,
        :Title,
        :DateDoc
    do
      suspend;
ELSE
    for SELECT Partition,
        Name,
        Updated,
        FileName,
        Title,
        DateDoc
    FROM Normatives
    WHERE (lTrim(rTrim(Partition))=:APartition)
    ORDER BY current_date desc
    into :Partition,
        :Name,
        :Updated,
        :FileName,
        :Title,
        :DateDoc
    do
      suspend;
end
^

ALTER PROCEDURE ORDERSDELETEEMPTY
AS
begin
DELETE FROM Orders
WHERE OrderCount=0;
end
^

ALTER PROCEDURE ORDERSHDELETEALL
AS
begin
DELETE FROM OrdersH;
end
^

ALTER PROCEDURE ORDERSHDELETEEMPTY
AS
begin
DELETE FROM OrdersH
WHERE NOT Exists(SELECT OrderId FROM Orders WHERE OrderId=OrdersH.OrderId);
end
^

ALTER PROCEDURE ORDERSHDELETENOTCLOSED (
    ACLIENTID SMALLINT,
    APRICECODE INTEGER,
    AREGIONCODE INTEGER)
AS
begin
DELETE FROM OrdersH
WHERE ClientId=:AClientId
    And PriceCode=:APriceCode
    And RegionCode=:ARegionCode
    And Closed <> '1';
end
^

ALTER PROCEDURE ORDERSHDELETENOTCLOSEDALL
AS
begin
DELETE FROM OrdersH
WHERE Closed <> '1';
end
^

ALTER PROCEDURE ORDERSHSHOW (
    ACLIENTID INTEGER,
    ACLOSED CHAR(1) CHARACTER SET WIN1251,
    TIMEZONEBIAS INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    DATEPRICE TIMESTAMP,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251)
AS
begin
for SELECT DISTINCT OrdersH.OrderId,
    OrdersH.ServerOrderId,
    (PricesData.DatePrice) AS DatePrice,
    OrdersH.PriceCode,
    OrdersH.RegionCode,
    OrdersH.OrderDate,
    OrdersH.SendDate,
    OrdersH.Closed,
    OrdersH.Send,
    OrdersH.PriceName,
    OrdersH.RegionName,
    Count(*) AS Positions,
    Sum(osbc.OrderCount*osbc.Price) AS SumOrder,
    SupportPhone,
    MessageTo,
    Comments
FROM ((OrdersH INNER JOIN OrdersShowByClient(:AClientId) osbc
    ON OrdersH.OrderId=osbc.OrderId)
    INNER JOIN PricesData ON OrdersH.PriceCode=PricesData.PriceCode)
    INNER JOIN RegionalData ON (RegionalData.RegionCode=OrdersH.RegionCode)
    AND (PricesData.FirmCode=RegionalData.FirmCode)
WHERE OrdersH.ClientId=:AClientId And (OrdersShowByClient.OrderCount>0)
     and ((:AClosed = '1' And OrdersH.Closed = '1')
     or (:AClosed <> '1' And OrdersH.Closed <> '1'))
GROUP BY OrdersH.OrderId,
    OrdersH.ServerOrderId,
    OrdersH.PriceCode, DatePrice,
    OrdersH.RegionCode,
    OrdersH.OrderDate,
    OrdersH.SendDate,
    OrdersH.Closed,
    OrdersH.Send,
    OrdersH.PriceName,
    OrdersH.RegionName,
    SupportPhone,
    MessageTo,
    Comments
into :OrderId,
    :ServerOrderId,
    :DatePrice,
    :PriceCode,
    :RegionCode,
    :OrderDate,
    :SendDate,
    :Closed,
    :Send,
    :PriceName,
    :RegionName,
    :Positions,
    :SumOrder,
    :SupportPhone,
    :MessageTo,
    :Comments
do  suspend;
end
^

ALTER PROCEDURE ORDERSHSHOW1 (
    ACLIENTID SMALLINT,
    ACLOSED CHAR(1) CHARACTER SET WIN1251,
    TIMEZONEBIAS INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    DATEPRICE TIMESTAMP,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(24) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251)
AS
begin
for SELECT DISTINCT OrdersH.OrderId,
    OrdersH.ServerOrderId,
    (PricesData.DatePrice) AS DatePrice,
    OrdersH.PriceCode,
    OrdersH.RegionCode,
    OrdersH.OrderDate,
    OrdersH.SendDate,
    OrdersH.Closed,
    OrdersH.Send,
    OrdersH.PriceName,
    OrdersH.RegionName,
    Count(*) AS Positions,
    Sum(osbc.OrderCount*osbc.Price) AS SumOrder,
    '' AS SupportPhone,
    MessageTo,
    Comments
FROM (OrdersH INNER JOIN OrdersShowByClient(:AClientId) osbc ON OrdersH.OrderId=osbc.OrderId)
    LEFT JOIN PricesData ON OrdersH.PriceCode=PricesData.PriceCode
WHERE OrdersH.ClientId=:AClientId And osbc.OrderCount>0
    And ((:AClosed = '1' And OrdersH.Closed = '1')
    Or (:AClosed <> '1' And OrdersH.Closed <> '1'))
GROUP BY OrdersH.OrderId,
    OrdersH.ServerOrderId,
    OrdersH.PriceCode,
    DatePrice,
    OrdersH.RegionCode,
    OrdersH.OrderDate,
    OrdersH.SendDate,
    OrdersH.Closed,
    OrdersH.Send,
    OrdersH.PriceName,
    OrdersH.RegionName,
    MessageTo,
    Comments
into :OrderId,
    :ServerOrderId,
    :DatePrice,
    :PriceCode,
    :RegionCode,
    :OrderDate,
    :SendDate,
    :Closed,
    :Send,
    :PriceName,
    :RegionName,
    :Positions,
    :SumOrder,
    :SupportPhone,
    :MessageTo,
    :Comments
do
  suspend;
end
^

ALTER PROCEDURE ORDERSHSHOWCURRENT (
    ACLIENTID INTEGER,
    APRICECODE INTEGER,
    AREGIONCODE INTEGER)
RETURNS (
    ORDERID INTEGER,
    SERVERORDERID INTEGER,
    CLIENTID SMALLINT,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    ORDERDATE TIMESTAMP,
    SENDDATE TIMESTAMP,
    CLOSED CHAR(1) CHARACTER SET WIN1251,
    SEND CHAR(1) CHARACTER SET WIN1251,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251,
    MESSAGETO VARCHAR(100) CHARACTER SET WIN1251)
AS
begin
for SELECT ORDERID,
    SERVERORDERID,
    CLIENTID,
    PRICECODE,
    REGIONCODE,
    PriceName,
    RegionName,
    OrderDate,
    SendDate,
    Closed,
    Send,
    Comments,
    MessageTo
FROM OrdersH
WHERE ClientId=:AClientId
AND PriceCode=:APriceCode
AND RegionCode=:ARegionCode
AND Closed  <> '1'

into :ORDERID,
    :SERVERORDERID,
    :CLIENTID,
    :PRICECODE,
    :REGIONCODE,
    :PriceName,
    :RegionName,
    :OrderDate,
    :SendDate,
    :Closed,
    :Send,
    :Comments,
    :MessageTo
do  suspend;
end
^

ALTER PROCEDURE ORDERSHSHOWSINGLE (
    AORDERID INTEGER)
RETURNS (
    ORDERID INTEGER,
    COMMENTS VARCHAR(100) CHARACTER SET WIN1251,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251)
AS
begin
For SELECT OrdersH.OrderId,
        OrdersH.Comments,
        OrdersH.PriceName,
        OrdersH.RegionName
FROM OrdersH
WHERE OrdersH.OrderId=:AOrderId
into
    :OrderId,
    :Comments,
    :PriceName,
    :RegionName
do
  suspend;
end
^

ALTER PROCEDURE ORDERSINFO1 (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERID INTEGER,
    POSITIONS INTEGER,
    SUMORDER INTEGER)
AS
begin
for SELECT OrdersH.OrderId ,
    Count(*) AS Positions,
    Sum (osbc.OrderCount * osbc.Price) AS SumOrder
FROM ((OrdersH INNER JOIN OrdersShowByClient(:AClientId) osbc ON OrdersH.orderid=osbc.OrderId)
    INNER JOIN PricesRegionalData PRD ON (PRD.RegionCode=OrdersH.RegionCode)
    AND (PRD.PriceCode=OrdersH.PriceCode))
    LEFT JOIN PricesData ON PricesData.PriceCode=PRD.PriceCode
WHERE OrdersH.Closed <> '1'
    AND (osbc.OrderCount>0)
GROUP BY OrdersH.OrderId
into :orderID,
    :Positions,
    :SumOrder
do
  suspend;
end
^

ALTER PROCEDURE ORDERSINFO2 (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERSCOUNT INTEGER,
    POSITIONS INTEGER,
    SUMORDER INTEGER)
AS
begin
for SELECT Count(*) AS OrdersCount,
    Sum(OrdersInfo1.Positions) AS Positions,
    Sum(OrdersInfo1.SumOrder) AS SumOrder
FROM OrdersInfo1(:AClientID)
into :OrdersCount,
    :Positions,
    :SumOrder
do
  suspend;
end
^

ALTER PROCEDURE ORDERSSETCORENULL
AS
begin
UPDATE Orders SET CoreId = NULL
WHERE CoreId IS NOT NULL;
end
^

ALTER PROCEDURE ORDERSSHOW (
    AORDERID INTEGER)
RETURNS (
    ORDERID INTEGER,
    CLIENTID SMALLINT,
    COREID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    PRICE NUMERIC(18,4),
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    SUMORDER INTEGER)
AS
begin
For SELECT Orders.OrderId,
    Orders.ClientId,
    Orders.CoreId,
    Orders.fullcode,
    Orders.codefirmcr,
    Orders.synonymcode,
    Orders.synonymfirmcrcode,
    Orders.code,
    Orders.codecr,
    Orders.synonymname,
    Orders.synonymfirm,
    Orders.price,
    Orders.await,
    Orders.junk,
    Orders.ordercount,
    Orders.Price*Orders.OrderCount AS SumOrder
FROM Orders
WHERE (Orders.OrderId=:AOrderId AND OrderCount>0)
ORDER BY SynonymName, SynonymFirm
into
    :OrderId,
    :ClientId,
    :CoreId,
    :fullcode,
    :codefirmcr,
    :synonymcode,
    :SynonymFirmCrCode,
    :code,
    :codecr,
    :synonymname,
    :synonymfirm,
    :price,
    :await,
    :junk,
    :ordercount,
    :SumOrder
do
  suspend;
end
^

ALTER PROCEDURE ORDERSSHOWBYCLIENT (
    ACLIENTID SMALLINT)
RETURNS (
    ORDERID INTEGER,
    CLIENTID SMALLINT,
    COREID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    PRICE NUMERIC(18,4),
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER)
AS
begin
For SELECT Orders.OrderId,
    Orders.ClientId,
    Orders.CoreId,
    Orders.fullcode,
    Orders.codefirmcr,
    Orders.synonymcode,
    Orders.synonymfirmcrcode,
    Orders.code,
    Orders.codecr,
    Orders.synonymName,
    Orders.synonymfirm,
    Orders.price,
    Orders.await,
    Orders.junk,
    Orders.ordercount
FROM Orders
WHERE ClientId=:AClientId
into
    :OrderId,
    :ClientId,
    :CoreId,
    :fullcode,
    :codefirmcr,
    :synonymcode,
    :SynonymFirmCrCode,
    :code,
    :codecr,
    :synonymName,
    :synonymfirm,
    :price,
    :await,
    :junk,
    :ordercount
do
  suspend;
end
^

ALTER PROCEDURE ORDERSSHOWBYFORM (
    AFULLCODE INTEGER,
    ACLIENTID INTEGER)
RETURNS (
    FULLCODE INTEGER,
    SYNONYMNAME VARCHAR(255) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(50) CHARACTER SET WIN1251,
    ORDERCOUNT INTEGER,
    PRICE NUMERIC(18,4),
    ORDERDATE TIMESTAMP,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251)
AS
begin
for SELECT --TOP 5
    FullCode,
    SynonymName,
    SynonymFirm,
    OrderCount,
    Price,
    OrdersH.OrderDate,
    OrdersH.PriceName,
    OrdersH.RegionName,
    Await,
    Junk
FROM OrdersShowByClient(:AClientId) osbc
    INNER JOIN OrdersH ON osbc.OrderId=OrdersH.OrderId
WHERE osbc.OrderCount>0 And FullCode=:AFullCode
    And
    ((OrdersH.Closed = '1') Or
    (OrdersH.Closed Is Null))
ORDER BY OrdersH.OrderDate DESC, SynonymName
into :FullCode,
    :SynonymName,
    :SynonymFirm,
    :OrderCount,
    :Price,
    :OrderDate,
    :PriceName,
    :RegionName,
    :Await,
    :Junk
do
  suspend;
end
^

ALTER PROCEDURE ORDERSSHOWFORMSUMMARY (
    AFULLCODE INTEGER,
    ACLIENTID SMALLINT)
RETURNS (
    PRICEAVG INTEGER)
AS
begin
for SELECT Avg(Price) AS PriceAvg
FROM Orders INNER JOIN OrdersH ON OrdersH.OrderId=Orders.OrderId
WHERE Orders.FullCode=:AFullCode
    And Orders.OrderCount>0
    And (OrdersH.ClientId=:AClientId) And (current_date-OrdersH.OrderDate<183)
    AND (OrdersH.Closed = '1' OR
    (OrdersH.Closed IS NULL) )
into :PriceAvg
do
  suspend;
when any do
begin
  PriceAvg = null;
end
end
^

ALTER PROCEDURE PARAMSDELETEALL
AS
begin
DELETE FROM Params;
end
^

ALTER PROCEDURE PRICESDATADELETE
AS
begin
EXECUTE STATEMENT 'DELETE
FROM PricesData
WHERE NOT Exists(SELECT FirmCode, PriceCode FROM ExtPricesData
                WHERE FirmCode=PricesData.FirmCode
                AND PriceCode=PricesData.PriceCode);';
end
^

ALTER PROCEDURE PRICESDATADELETEALL
AS
begin
DELETE FROM PricesData;
end
^

ALTER PROCEDURE PRICESDATAUPDATE
AS
DECLARE VARIABLE     FIRMCODE          BIGINT;
DECLARE VARIABLE     PRICECODE         BIGINT;
DECLARE VARIABLE     PRICENAME         VARCHAR(70) CHARACTER SET WIN1251;
DECLARE VARIABLE     ALLOWINTEGR       INTEGER;
DECLARE VARIABLE     DATEPRICE         TIMESTAMP;
DECLARE VARIABLE     FRESH             INTEGER;
DECLARE VARIABLE     PRICEFMT          VARCHAR(3) CHARACTER SET WIN1251;
DECLARE VARIABLE     PRICEFILEDATE     TIMESTAMP;
DECLARE VARIABLE     PATHTOPRICE       VARCHAR(255) CHARACTER SET WIN1251;
DECLARE VARIABLE     DELIMITER         VARCHAR(3) CHARACTER SET WIN1251;
DECLARE VARIABLE     PARENTSYNONYM     BIGINT;
DECLARE VARIABLE     NAMEMASK          VARCHAR(255) CHARACTER SET WIN1251;
DECLARE VARIABLE     FORBWORDS         VARCHAR(255) CHARACTER SET WIN1251;
DECLARE VARIABLE     JUNKPOS           VARCHAR(10) CHARACTER SET WIN1251;
DECLARE VARIABLE     AWAITPOS          VARCHAR(10) CHARACTER SET WIN1251;
DECLARE VARIABLE     STARTLINE         INTEGER;
DECLARE VARIABLE     LISTNAME          VARCHAR(50) CHARACTER SET WIN1251;
DECLARE VARIABLE     TXTCODEBEGIN      SMALLINT;
DECLARE VARIABLE     TXTCODEEND        SMALLINT;
DECLARE VARIABLE     TXTCODECRBEGIN    SMALLINT;
DECLARE VARIABLE     TXTCODECREND      SMALLINT;
DECLARE VARIABLE     TXTNAMEBEGIN      SMALLINT;
DECLARE VARIABLE     TXTNAMEEND        SMALLINT;
DECLARE VARIABLE     TXTFIRMCRBEGIN    SMALLINT;
DECLARE VARIABLE     TXTFIRMCREND      SMALLINT;
DECLARE VARIABLE     TXTBASECOSTBEGIN  SMALLINT;
DECLARE VARIABLE     TXTBASECOSTEND    SMALLINT;
DECLARE VARIABLE     TXTUNITBEGIN      SMALLINT;
DECLARE VARIABLE     TXTUNITEND        SMALLINT;
DECLARE VARIABLE     TXTVOLUMEBEGIN    SMALLINT;
DECLARE VARIABLE     TXTVOLUMEEND      SMALLINT;
DECLARE VARIABLE     TXTQUANTITYBEGIN  SMALLINT;
DECLARE VARIABLE     TXTQUANTITYEND    SMALLINT;
DECLARE VARIABLE     TXTNOTEBEGIN      SMALLINT;
DECLARE VARIABLE     TXTNOTEEND        SMALLINT;
DECLARE VARIABLE     TXTPERIODBEGIN    SMALLINT;
DECLARE VARIABLE     TXTPERIODEND      SMALLINT;
DECLARE VARIABLE     TXTDOCBEGIN       SMALLINT;
DECLARE VARIABLE     TXTDOCEND         SMALLINT;
DECLARE VARIABLE     TXTJUNKBEGIN      SMALLINT;
DECLARE VARIABLE     TXTJUNKEND        SMALLINT;
DECLARE VARIABLE     TXTAWAITBEGIN     SMALLINT;
DECLARE VARIABLE     TXTAWAITEND       SMALLINT;
DECLARE VARIABLE     FCODE             VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FCODECR           VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FNAME1            VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FNAME2            VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FNAME3            VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FFIRMCR           VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FBASECOST         VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FUNIT             VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FVOLUME           VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FQUANTITY         VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FNOTE             VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FPERIOD           VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FDOC              VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FJUNK             VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     FAWAIT            VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE    PROTEK            INTEGER;
begin
for Select
         PriceCode, 
         FirmCode ,
         PriceName ,
         AllowIntegr ,
         DatePrice ,
         Fresh ,
         PriceFmt ,
         Delimiter ,
         ParentSynonym ,
         NameMask ,
         ForbWords ,
         JunkPos ,
         AwaitPos ,
         StartLine ,
         ListName ,
         TxtCodeBegin ,
         TxtCodeEnd ,
         TxtCodeCrBegin ,
         TxtCodeCrEnd ,
         TxtNameBegin ,
         TxtNameEnd ,
         TxtFirmCrBegin ,
         TxtFirmCrEnd ,
         TxtBaseCostBegin ,
         TxtBaseCostEnd ,
         TxtUnitBegin ,
         TxtUnitEnd ,
         TxtVolumeBegin ,
         TxtVolumeEnd ,
         TxtQuantityBegin ,
         TxtQuantityEnd ,
         TxtNoteBegin ,
         TxtNoteEnd ,
         TxtPeriodBegin ,
         TxtPeriodEnd ,
         TxtDocBegin ,
         TxtDocEnd ,
         TxtJunkBegin ,
         TxtJunkEnd ,
         TxtAwaitBegin ,
         TxtAwaitEnd ,
         FCode ,
         FCodeCr ,
         FName1 ,
         FName2 ,
         FName3 ,
         FFirmCr ,
         FBaseCost ,
         FUnit ,
         FVolume ,
         FQuantity ,
         FNote ,
         FPeriod ,
         FDoc ,
         FJunk ,
         FAwait ,
         Protek 
from 
  TmpPricesData TPD
into 
         :PriceCode,
         :FirmCode ,
         :PriceName ,
         :AllowIntegr ,
         :DatePrice ,
         :Fresh ,
         :PriceFmt ,
         :Delimiter ,
         :ParentSynonym ,
         :NameMask ,
         :ForbWords ,
         :JunkPos ,
         :AwaitPos ,
         :StartLine ,
         :ListName ,
         :TxtCodeBegin ,
         :TxtCodeEnd ,
         :TxtCodeCrBegin ,
         :TxtCodeCrEnd ,
         :TxtNameBegin ,
         :TxtNameEnd ,
         :TxtFirmCrBegin ,
         :TxtFirmCrEnd ,
         :TxtBaseCostBegin ,
         :TxtBaseCostEnd ,
         :TxtUnitBegin ,
         :TxtUnitEnd ,
         :TxtVolumeBegin ,
         :TxtVolumeEnd ,
         :TxtQuantityBegin ,
         :TxtQuantityEnd ,
         :TxtNoteBegin ,
         :TxtNoteEnd ,
         :TxtPeriodBegin ,
         :TxtPeriodEnd ,
         :TxtDocBegin ,
         :TxtDocEnd ,
         :TxtJunkBegin ,
         :TxtJunkEnd ,
         :TxtAwaitBegin ,
         :TxtAwaitEnd ,
         :FCode ,
         :FCodeCr ,
         :FName1 ,
         :FName2 ,
         :FName3 ,
         :FFirmCr ,
         :FBaseCost ,
         :FUnit ,
         :FVolume ,
         :FQuantity ,
         :FNote ,
         :FPeriod ,
         :FDoc ,
         :FJunk ,
         :FAwait ,
         :Protek 
do
UPDATE PricesData PD
    SET 
         FirmCode = :FirmCode,
         PriceName = :PriceName,
         AllowIntegr = :AllowIntegr,
         DatePrice = :DatePrice,
         Fresh = :Fresh,
         PriceFmt = :PriceFmt,
         Delimiter = :Delimiter,
         ParentSynonym = :ParentSynonym,
         NameMask = :NameMask,
         ForbWords = :ForbWords,
         JunkPos = :JunkPos,
         AwaitPos = :AwaitPos,
         StartLine = :StartLine,
         ListName = :ListName,
         TxtCodeBegin = :TxtCodeBegin,
         TxtCodeEnd = :TxtCodeEnd,
         TxtCodeCrBegin = :TxtCodeCrBegin,
         TxtCodeCrEnd = :TxtCodeCrEnd,
         TxtNameBegin = :TxtNameBegin,
         TxtNameEnd = :TxtNameEnd,
         TxtFirmCrBegin = :TxtFirmCrBegin,
         TxtFirmCrEnd = :TxtFirmCrEnd,
         TxtBaseCostBegin = :TxtBaseCostBegin,
         TxtBaseCostEnd = :TxtBaseCostEnd,
         TxtUnitBegin = :TxtUnitBegin,
         TxtUnitEnd = :TxtUnitEnd,
         TxtVolumeBegin = :TxtVolumeBegin,
         TxtVolumeEnd = :TxtVolumeEnd,
         TxtQuantityBegin = :TxtQuantityBegin,
         TxtQuantityEnd = :TxtQuantityEnd,
         TxtNoteBegin = :TxtNoteBegin,
         TxtNoteEnd = :TxtNoteEnd,
         TxtPeriodBegin = :TxtPeriodBegin,
         TxtPeriodEnd = :TxtPeriodEnd,
         TxtDocBegin = :TxtDocBegin,
         TxtDocEnd = :TxtDocEnd,
         TxtJunkBegin = :TxtJunkBegin,
         TxtJunkEnd = :TxtJunkEnd,
         TxtAwaitBegin = :TxtAwaitBegin,
         TxtAwaitEnd = :TxtAwaitEnd,
         FCode = :FCode,
         FCodeCr = :FCodeCr,
         FName1 = :FName1,
         FName2 = :FName2,
         FName3 = :FName3,
         FFirmCr = :FFirmCr,
         FBaseCost = :FBaseCost,
         FUnit = :FUnit,
         FVolume = :FVolume,
         FQuantity = :FQuantity,
         FNote = :FNote,
         FPeriod = :FPeriod,
         FDoc = :FDoc,
         FJunk = :FJunk,
         FAwait = :FAwait,
         Protek = :Protek
where PD.PriceCode = :PriceCode;
end
^

ALTER PROCEDURE PRICESREGIONALDATADELETE
AS
begin
EXECUTE STATEMENT 'DELETE FROM PricesRegionalData
WHERE NOT Exists(SELECT PriceCode, RegionCode FROM ExtPricesRegionalData
                WHERE PriceCode=PricesRegionalData.PriceCode
                AND RegionCode=PricesRegionalData.RegionCode);';
end
^

ALTER PROCEDURE PRICESREGIONALDATADELETEALL
AS
begin
DELETE FROM PricesRegionalData;
end
^

ALTER PROCEDURE PRICESREGIONALDATAUPDATE
AS
DECLARE VARIABLE     PRICECODE   BIGINT;
DECLARE VARIABLE     STORAGE     INTEGER;
DECLARE VARIABLE     UPCOST      NUMERIC(18,4);
DECLARE VARIABLE     MINREQ      INTEGER;
DECLARE VARIABLE     ENABLED     INTEGER;
begin
for select
         PriceCode,
         Storage,
         UpCost,
         MinReq,
         Enabled
from
  TmpPricesRegionalData TPRD
into
         :PriceCode,
         :Storage,
         :UpCost,
         :MinReq,
         :Enabled
do
UPDATE PricesRegionalData PRD
    SET 
         Storage = :Storage,
         UpCost = :UpCost,
         MinReq = :MinReq,
         Enabled = :Enabled
where PRD.PriceCode = :PriceCode;
end
^

ALTER PROCEDURE PRICESSHOW (
    ACLIENTID INTEGER,
    TIMEZONEBIAS INTEGER)
RETURNS (
    PRICECODE INTEGER,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    DATEPRICE TIMESTAMP,
    UPCOST DOUBLE PRECISION,
    MINREQ INTEGER,
    ENABLED CHAR(1) CHARACTER SET WIN1251,
    PRICEINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FIRMCODE INTEGER,
    FULLNAME VARCHAR(40) CHARACTER SET WIN1251,
    STORAGE CHAR(1) CHARACTER SET WIN1251,
    ADMINMAIL VARCHAR(35) CHARACTER SET WIN1251,
    SUPPORTPHONE VARCHAR(20) CHARACTER SET WIN1251,
    CONTACTINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    OPERATIVEINFO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    REGIONCODE INTEGER,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    POSITIONS INTEGER,
    SUMORDER INTEGER,
    PRICESIZE INTEGER)
AS
begin
for SELECT PD.PriceCode,
    PriceName,
    (PD.DatePrice - :TimeZoneBias/1440) AS DatePrice,
    PRD.UpCost,
    PRD.MinReq,
    Enabled,
    PriceInfo,
    CD.FirmCode,
    CD.FullName,
    Storage,
    AdminMail,
    SupportPhone,
    ContactInfo,
    OperativeInfo,
    R.RegionCode,
    RegionName,
    (SELECT Count(*) FROM Orders
        INNER JOIN OrdersH ON Orders.OrderId=OrdersH.OrderId
        WHERE OrdersH.ClientId=:AClientId
        AND OrdersH.PriceCode=PD.PriceCode
        AND OrdersH.RegionCode=R.RegionCode
        AND OrdersH.Closed <> '1'
        AND Orders.OrderCount>0) AS Positions,
    (SELECT Sum(Orders.Price*Orders.OrderCount) FROM Orders
        INNER JOIN OrdersH ON Orders.OrderId=OrdersH.OrderId
        WHERE OrdersH.ClientId=:AClientId
        AND OrdersH.PriceCode=PD.PriceCode
        AND OrdersH.RegionCode=R.RegionCode
        AND NOT OrdersH.Closed <> '1'
        AND Orders.OrderCount>0) AS SumOrder,
    (SELECT Count(*) FROM Core
        WHERE PriceCode=PD.PriceCode
        AND RegionCode=R.RegionCode) AS PriceSize
FROM (((PricesData PD INNER JOIN PricesRegionalData PRD ON PD.pricecode=PRD.pricecode)
    INNER JOIN Regions R ON PRD.RegionCode=R.RegionCode)
    INNER JOIN ClientsDataN CD ON CD.FirmCode=PD.FirmCode)
    INNER JOIN RegionalData RD ON (RD.RegionCode=PRD.RegionCode) AND (RD.FirmCode=CD.FirmCode)
WHERE
    PD.AllowIntegr <> '1' OR
    PD.PriceFileDate IS NOT NULL
ORDER BY PriceName
into :PriceCode,
    :PriceName,
    :DatePrice,
    :UpCost,
    :MinReq,
    :Enabled,
    :PriceInfo,
    :FirmCode,
    :FullName,
    :Storage,
    :AdminMail,
    :SupportPhone,
    :ContactInfo,
    :OperativeInfo,
    :RegionCode,
    :RegionName,
    :Positions,
    :SumOrder,
    :PriceSize
do
  suspend;
end
^

ALTER PROCEDURE REGIONALDATADELETE
AS
begin
EXECUTE STATEMENT 'DELETE FROM RegionalData
WHERE NOT Exists(SELECT FirmCode, RegionCode FROM ExtRegionalData
                WHERE FirmCode=RegionalData.FirmCode
                AND RegionCode=RegionalData.RegionCode);';
end
^

ALTER PROCEDURE REGIONALDATADELETEALL
AS
begin
DELETE FROM RegionalData;
end
^

ALTER PROCEDURE REGIONALDATAUPDATE
AS
DECLARE VARIABLE     FIRMCODE       BIGINT;
DECLARE VARIABLE     SUPPORTPHONE   VARCHAR(20) CHARACTER SET WIN1251;
DECLARE VARIABLE     ADMINMAIL      VARCHAR(35) CHARACTER SET WIN1251;
begin
for select
         FirmCode,
         AdminMail,
         SupportPhone
from
  TmpRegionalData TRD
into
         :FirmCode,
         :AdminMail,
         :SupportPhone
do
UPDATE RegionalData RD
    SET 
         AdminMail = :AdminMail,
         SupportPhone = :SupportPhone
where RD.FirmCode = :FirmCode;
end
^

ALTER PROCEDURE REGIONSDELETE
AS
begin
EXECUTE STATEMENT 'DELETE FROM Regions
WHERE NOT Exists(SELECT RegionCode FROM ExtRegions
                WHERE RegionCode=Regions.RegionCode);';
end
^

ALTER PROCEDURE REGIONSDELETEALL
AS
begin
DELETE FROM Regions;
end
^

ALTER PROCEDURE REGIONSINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO Regions (RegionCode, RegionName)
SELECT RegionCode,
    RegionName
FROM ExtRegions ER
WHERE NOT Exists(SELECT RegionCode FROM Regions WHERE RegionCode=ER.RegionCode);';
end
^

ALTER PROCEDURE REGIONSUPDATE
AS
DECLARE VARIABLE     REGIONCODE  BIGINT;
DECLARE VARIABLE     REGIONNAME  VARCHAR(25) CHARACTER SET WIN1251;
DECLARE VARIABLE     PRICERET    VARCHAR(254) CHARACTER SET WIN1251;
begin
for select
         RegionCode,
         RegionName,
         PriceRet
from
  TmpRegions TR
into
         :RegionCode,
         :RegionName,
         :PriceRet
do
UPDATE Regions R
    SET 
         RegionName = :RegionName,
         PriceRet = :PriceRet
where RegionCode = :RegionCode;
end
^

ALTER PROCEDURE REGISTRYDELETE
AS
begin
DELETE FROM Registry;
end
^

ALTER PROCEDURE REGISTRYINSERT
AS
begin
  /* Procedure Text */ /*$$IBE$$ 
  suspend;
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE SECTIONDELETE
AS
begin
EXECUTE STATEMENT 'DELETE FROM SECTION1
WHERE NOT Exists(SELECT Id FROM ExtSection WHERE Id=SECTION1.Id);';
end
^

ALTER PROCEDURE SECTIONDELETEALL
AS
begin
DELETE FROM SECTION1;
end
^

ALTER PROCEDURE SECTIONINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO SECTION1
SELECT ID, SectionName
FROM ExtSection ES
WHERE NOT Exists(SELECT Id FROM SECTION1 WHERE Id=ES.Id);';
end
^

ALTER PROCEDURE SECTIONUPDATE
AS
begin
UPDATE SECTION1 S
    SET SectionName = (select TS.SectionName
                   from TmpSection TS
                   where S.Id = TS.Id)
where exists (Select TS.Id from TmpSection TS
                                    where S.Id = TS.Id);
end
^

ALTER PROCEDURE SUMMARYHSHOW (
    ACLIENTID SMALLINT)
RETURNS (
    COUNTORDER INTEGER,
    SUMORDER INTEGER)
AS
begin
for SELECT Count(*) AS CountOrder,
    Sum(Orders.Price * Orders.OrderCount) AS SumOrder
FROM Orders INNER JOIN OrdersH ON Orders.OrderId=OrdersH.OrderId
WHERE OrdersH.ClientId=:AClientId
    AND OrdersH.Closed <> '1'
    And Orders.OrderCount> '0'
into :CountOrder,
    :SumOrder
do
  suspend;
end
^

ALTER PROCEDURE SUMMARYSHOW (
    ACLIENTID SMALLINT,
    RETAILFORCOUNT INTEGER)
RETURNS (
    VOLUME VARCHAR(15) CHARACTER SET WIN1251,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    NOTE VARCHAR(50) CHARACTER SET WIN1251,
    PERIOD VARCHAR(20) CHARACTER SET WIN1251,
    JUNK CHAR(1) CHARACTER SET WIN1251,
    AWAIT CHAR(1) CHARACTER SET WIN1251,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    BASECOST NUMERIC(18,4),
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    PRICERET INTEGER,
    ORDERCOUNT INTEGER,
    ORDERSCOREID INTEGER,
    ORDERSORDERID INTEGER)
AS
begin
for SELECT Core.Volume,
    Core.Quantity,
    Core.Note,
    Core.Period,
    Core.Junk,
    Core.Await,
    Synonym.SynonymName,
    SynonymFirmCr.SynonymName AS SynonymFirm,
    Core.BaseCost,
    PricesData.PriceName,
    Regions.RegionName,
    CAST((Core.BaseCost*(1 + :RetailForcount/100)) As NUMERIC(18,4) )AS PriceRet,
    Orders.OrderCount,
    Orders.CoreId AS OrdersCoreId,
    Orders.OrderId AS OrdersOrderId
FROM (((((Core INNER JOIN Synonym ON Core.SynonymCode=Synonym.SynonymCode)
    LEFT JOIN SynonymFirmCr ON Core.SynonymFirmCrCode=SynonymFirmCr.SynonymFirmCrCode)
    INNER JOIN PricesData ON Core.PriceCode=PricesData.PriceCode)
    INNER JOIN Regions ON Core.RegionCode=Regions.RegionCode)
    INNER JOIN Orders ON Core.CoreId=Orders.CoreId)
    INNER JOIN OrdersH ON Orders.OrderId=OrdersH.OrderId
WHERE OrdersH.ClientId=:AClientId And Orders.OrderCount>0
ORDER BY Synonym.SynonymName
into :Volume,
    :Quantity,
    :Note,
    :Period,
    :Junk,
    :Await,
    :SynonymName,
    :SynonymFirm,
    :BaseCost,
    :PriceName,
    :RegionName,
    :PriceRet,
    :OrderCount,
    :OrdersCoreId,
    :OrdersOrderId
do
  suspend;
end
^

ALTER PROCEDURE SYNONYMDELETEALL
AS
begin
DELETE FROM Synonym;
end
^

ALTER PROCEDURE SYNONYMDELETEFORMHEADERS
AS
begin
DELETE FROM Synonym
WHERE SynonymCode<0;
end
^

ALTER PROCEDURE SYNONYMFIRMCRDELETEALL
AS
begin
DELETE FROM SynonymFirmCr;
end
^

ALTER PROCEDURE SYNONYMFIRMCRINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO SynonymFirmCr
SELECT SynonymFirmCrCode, SynonymName, PriceCode
FROM ExtSynonymFirmCr ESFC
WHERE Not Exists(SELECT SynonymFirmCrCode
                FROM SynonymFirmCr WHERE SynonymFirmCrCode=ESFC.SynonymFirmCrCode);';
end
^

ALTER PROCEDURE SYNONYMINSERTALL
RETURNS (
    RES VARCHAR(11) CHARACTER SET WIN1251)
AS
DECLARE VARIABLE SYNONYMNAME VARCHAR(255);
DECLARE VARIABLE SYNONYMCODE VARCHAR(11);
begin
/*
INSERT INTO Synonym (
SynonymCode ,
SynonymName
)
SELECT cast(SynonymCode as integer) as SynonymCode ,
--substrlen(SynonymName, 1, 249)
'Test' as SynonymName
FROM ExtSynonym
WHERE SynonymCode>0;
*/
for select SynonymCode, SynonymName from ExtSynonym where SynonymCode < 0 into :SynonymCode, :SynonymName
do
  insert into synonym ( SynonymCode, SynonymName) values (cast(:SynonymCode as integer), substrlen(:SynonymName, 1, 250));
when any do
begin
  Res = :SynonymCode;
  suspend;
end
end
^

ALTER PROCEDURE SYNONYMINSERTFORMHEADERS
AS
begin
INSERT INTO Synonym( SynonymCode, SynonymName )
SELECT DISTINCT -Core.FullCode,
    CATALOG1.Name || '  ' || CATALOG1.Form
FROM Core, CATALOG1
WHERE Core.FullCode=CATALOG1.FullCode;
end
^

ALTER PROCEDURE SYNONYMINSERTUNFOUNDED
AS
begin
EXECUTE STATEMENT 'INSERT INTO Synonym ( SynonymCode, SynonymName )
SELECT ExtCore.SynonymCode, CATALOG1.Name ||'' ''|| CATALOG1.Form
FROM ExtCore INNER JOIN CATALOG1 ON ExtCore.FullCode=CATALOG1.FullCode
WHERE Not Exists(SELECT SynonymCode FROM Synonym WHERE SynonymCode=ExtCore.SynonymCode);';
end
^

ALTER PROCEDURE TESTWAYBILLHEADINSERT
AS
begin
INSERT INTO WayBillHead
SELECT OrdersH.ServerOrderID AS ServerID,
    OrdersH.ServerOrderID AS ServerOrderID,
    Current_Date AS WriteTime,
    OrdersH.ClientId AS ClientID,
    OrdersH.PriceCode AS PriceCode,
    OrdersH.RegionCode AS RegionCode,
    OrdersH.PriceName AS PriceName,
    OrdersH.RegionName AS RegionName,
    Null AS FirmComment,
    Count(*) AS RowCount
FROM OrdersH INNER JOIN Orders ON OrdersH.OrderId=Orders.OrderId
WHERE (OrdersH.ServerOrderID<>0)
    AND NOT EXISTS(SELECT  WBH.ServerID FROM WayBillHead WBH
                        WHERE  WBH.ServerID = OrdersH.ServerOrderID)
GROUP BY OrdersH.ServerOrderID,
         OrdersH.PriceCode,
         OrdersH.OrderId,
         OrdersH.ClientId,
         OrdersH.RegionCode,
         OrdersH.PriceName,
         OrdersH.RegionName;
end
^

ALTER PROCEDURE TESTWAYBILLLISTINSERT
AS
begin
INSERT INTO WayBillList
SELECT Orders.Id AS ServerID,
    WBH.ServerID AS ServerWayBillID,
    Orders.FullCode AS FullCode,
    Orders.CodeFirmCr AS CodeFirmCr,
    Orders.SynonymCode AS SynonymCode,
    Orders.SynonymFirmCrCode AS SynonymFirmCrCode,
    Orders.SynonymName AS SynonymName, Orders.SynonymFirm AS SynonymFirm,
    Orders.Code AS Code,
    Orders.CodeCr AS CodeCr,
    Orders.OrderCount AS Quantity,
    Orders.Price AS Cost
FROM (WayBillHead WBH INNER JOIN OrdersH OrdH
    ON WBH.ServerOrderID=OrdH.ServerOrderId) INNER JOIN Orders
    ON OrdH.OrderId=Orders.OrderId
WHERE NOT EXISTS(SELECT  WBL.ServerID FROM WayBillList WBL
                WHERE  WBL.ServerID = Orders.ID);
end
^

ALTER PROCEDURE TMPCATALOGCURRENCYDELETE
AS
begin
DELETE FROM TmpCatalogCurrency;
end
^

ALTER PROCEDURE TMPCATALOGCURRENCYINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpCatalogCurrency
SELECT Currency, Exchange
FROM ExtCatalogCurrency ECC
WHERE Exists(SELECT Currency FROM CatalogCurrency WHERE Currency=ECC.Currency);';
end
^

ALTER PROCEDURE TMPCATALOGDELETE
AS
begin
DELETE FROM TmpCatalog;
end
^

ALTER PROCEDURE TMPCATALOGINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpCatalog
SELECT FullCode, ShortCode, Name, Form, SectionId, ATC4, FTG, MNN
FROM ExtCatalog
WHERE Exists(SELECT FullCode FROM CATALOG1 WHERE FullCode=ExtCatalog.FullCode);';
end
^

ALTER PROCEDURE TMPCLIENTSDATANDELETE
AS
begin
DELETE FROM TmpClientsDataN;
end
^

ALTER PROCEDURE TMPCLIENTSDATANINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpClientsDataN
SELECT FirmCode,
    FullName,
    Fax,
    Phone,
    Mail,
    Adress,
    BussStop,
    URL,
    OrderManagerName,
    OrderManagerPhone,
    OrderManagerMail,
    ClientManagerName,
    ClientManagerPhone,
    ClientManagerMail
FROM ExtClientsDataN
WHERE Exists(SELECT FirmCode FROM ClientsDataN WHERE FirmCode=ExtClientsDataN.FirmCode);';
end
^

ALTER PROCEDURE TMPCLIENTSDELETE
AS
begin
DELETE FROM TmpClients;
end
^

ALTER PROCEDURE TMPCLIENTSINSERT
AS
begin /*$$IBE$$ 
EXECUTE STATEMENT 'INSERT INTO TmpClients ( ClientId, Name, RegionCode, Address, Phone, Forcount, MaxUsers, Excess, DeltaMode, ReqMask, TechSupport, LeadFromBasic )
SELECT ClientId, Name, RegionCode, Address, Phone, Forcount, MaxUsers, Excess, DeltaMode, ReqMask, TechSupport, LeadFromBasic
FROM ExtClients
WHERE Exists(SELECT ClientId FROM Clients WHERE ClientId=ExtClients.ClientId);
';
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE TMPPRICESDATADELETE
AS
begin
DELETE FROM TmpPricesData;
end
^

ALTER PROCEDURE TMPPRICESDATAINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpPricesData
SELECT cast(nullif(ltrim(FirmCode), '') as integer) as FirmCode,
    cast(nullif(ltrim(PriceCode), '') as integer) as PriceCode,
    PriceName,
    cast(nullif(ltrim(AllowIntegr), '')  as integer) as AllowIntegr,
    priceinfo,
    cast(DatePrice as timestamp),
    cast(Fresh as integer),
    PriceFMT,
    Delimiter,
    cast(nullif(ltrim(ParentSynonym), '') as integer) as ParentSynonym,
    NameMask,
    ForbWords,
    JunkPos,
    AwaitPos,
    cast(nullif(ltrim(StartLine), '') as integer) as TXTCodeBegin,
    ListName,
        cast(nullif(ltrim(TXTCodeBegin), '') as smallint) as TXTCodeBegin,
        cast(nullif(ltrim(TXTCodeEnd), '') as smallint) as TXTCodeEnd,
        cast(nullif(ltrim(TXTCodeCrBegin), '') as smallint) as TXTCodeCrBegin,
        cast(nullif(ltrim(TXTCodeCrEnd), '') as smallint) as TXTCodeCrEnd,
        cast(nullif(ltrim(TXTNameBegin), '') as smallint) as TXTNameBegin,
        cast(nullif(ltrim(TXTNameEnd), '') as smallint) as TXTNameEnd,
        cast(nullif(ltrim(TXTFirmCrBegin), '') as smallint) as TXTFirmCrBegin,
        cast(nullif(ltrim(TXTFirmCrEnd), '') as smallint) as TXTFirmCrEnd,
        cast(nullif(ltrim(TXTBaseCostBegin), '') as smallint) as TXTBaseCostBegin,
        cast(nullif(ltrim(TXTBaseCostEnd), '') as smallint) as TXTBaseCostEnd,
        cast(nullif(ltrim(TXTUnitBegin), '') as smallint) as TXTUnitBegin,
        cast(nullif(ltrim(TXTUnitEnd), '') as smallint) as TXTUnitEnd,
        cast(nullif(ltrim(TXTVolumeBegin), '') as smallint) as TXTVolumeBegin,
        cast(nullif(ltrim(TXTVolumeEnd), '') as smallint) as TXTVolumeEnd,
        cast(nullif(ltrim(TXTQuantityBegin), '') as smallint) as TXTQuantityBegin,
        cast(nullif(ltrim(TXTQuantityEnd), '') as smallint) as TXTQuantityEnd,
        cast(nullif(ltrim(TXTNoteBegin), '') as smallint) as TXTNoteBegin,
        cast(nullif(ltrim(TXTNoteEnd), '') as smallint) as TXTNoteEnd,
        cast(nullif(ltrim(TXTPeriodBegin), '') as smallint) as TXTPeriodBegin,
        cast(nullif(ltrim(TXTPeriodEnd), '') as smallint) as TXTPeriodEnd,
        cast(nullif(ltrim(TXTDocBegin), '') as smallint) as TXTDocBegin,
        cast(nullif(ltrim(TXTDocEnd), '') as smallint) as TXTDocEnd,
        cast(nullif(ltrim(TXTJunkBegin), '') as smallint) as TXTJunkBegin,
        cast(nullif(ltrim(TXTJunkEnd), '') as smallint) as TXTJunkEnd,
        cast(nullif(ltrim(TXTAwaitBegin), '') as smallint) as TXTAwaitBegin,
        cast(nullif(ltrim(TXTAwaitEnd), '') as smallint) as TXTAwaitEnd,
    FCode,
    FCodeCr,
    FName1,
    FName2,
    FName3,
    FFirmCr,
    FBaseCost,
    FUnit,
    FVolume,
    FQuantity,
    FNote,
    FPeriod,
    FDoc,
    FJunk,
    FAwait,
    cast(nullif(ltrim(Protek), '') as integer) as TXTAwaitEnd
FROM ExtPricesData
WHERE Exists(SELECT FirmCode, PriceCode FROM PricesData WHERE PriceCode=ExtPricesData.PriceCode
AND FirmCode=ExtPricesData.FirmCode);
';
end
^

ALTER PROCEDURE TMPPRICESREGIONALDATADELETE
AS
begin
DELETE FROM TmpPricesRegionalData;
end
^

ALTER PROCEDURE TMPPRICESREGIONALDATAINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpPricesRegionalData
SELECT PriceCode, RegionCode, Storage, UpCost, MinReq, Enabled
FROM ExtPricesRegionalData
WHERE Exists(SELECT PriceCode, RegionCode FROM PricesRegionalData WHERE PriceCode=ExtPricesRegionalData.PriceCode
AND RegionCode=ExtPricesRegionalData.RegionCode);
';
end
^

ALTER PROCEDURE TMPREGIONALDATADELETE
AS
begin
DELETE FROM TmpRegionalData;
end
^

ALTER PROCEDURE TMPREGIONALDATAINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpRegionalData
SELECT FirmCode, regioncode,  SupportPhone, AdminMail, ContactInfo, OperativeInfo
FROM ExtRegionalData
WHERE Exists(SELECT FirmCode, RegionCode FROM RegionalData WHERE FirmCode=ExtRegionalData.FirmCode
AND RegionCode=ExtRegionalData.RegionCode);
';
end
^

ALTER PROCEDURE TMPREGIONSDELETE
AS
begin
DELETE FROM TmpRegions;
end
^

ALTER PROCEDURE TMPREGIONSINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpRegions (RegionCode, RegionName)
SELECT RegionCode, RegionName
FROM ExtRegions
WHERE Exists(SELECT RegionCode FROM Regions WHERE RegionCode=ExtRegions.RegionCode);';
end
^

ALTER PROCEDURE TMPSECTIONDELETE
AS
begin
DELETE FROM TmpSection;
end
^

ALTER PROCEDURE TMPSECTIONINSERT
AS
begin
EXECUTE STATEMENT 'INSERT INTO TmpSection
SELECT ID, SectionName
FROM ExtSection
WHERE Exists(SELECT Id FROM SECTION1 WHERE Id=ExtSection.Id);';
end
^

ALTER PROCEDURE WAYBILLHEADINSERT
AS
begin /*$$IBE$$ 
EXECUTE STATEMENT 'INSERT INTO WayBillHead
SELECT *
FROM ExtWayBillHead AS A
WHERE Not Exists(SELECT ServerID FROM WayBillHead WHERE ServerID=A.ServerID);
';
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE WAYBILLHEADSHOW (
    ACLIENTID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERORDERID INTEGER,
    WRITETIME TIMESTAMP,
    CLIENTID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(70) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    FIRMCOMMENT VARCHAR(100) CHARACTER SET WIN1251,
    ROWCOUNT SMALLINT)
AS
begin
For SELECT WayBillHead.serverid,
    WayBillHead.serverorderid,
    WayBillHead.writetime,
    WayBillHead.clientid,
    WayBillHead.pricecode,
    WayBillHead.regioncode,
    WayBillHead.pricename,
    WayBillHead.regionname,
    WayBillHead.firmcomment,
    WayBillHead.rowcount
FROM WayBillHead JOIN PricesData ON PricesData.PriceCode=WayBillHead.PriceCode
WHERE WayBillHead.ClientID=:AClientID
into
    :serverid,
    :serverorderid,
    :writetime,
    :clientid,
    :pricecode,
    regioncode,
    :pricename,
    :regionname,
    :firmcomment,
    :rowcount
do
  suspend;
end
^

ALTER PROCEDURE WAYBILLHEADSHOWCURRENT (
    ASERVERORDERID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERORDERID INTEGER,
    WRITETIME TIMESTAMP,
    CLIENTID INTEGER,
    PRICECODE INTEGER,
    REGIONCODE INTEGER,
    PRICENAME VARCHAR(100) CHARACTER SET WIN1251,
    REGIONNAME VARCHAR(25) CHARACTER SET WIN1251,
    FIRMCOMMENT VARCHAR(100) CHARACTER SET WIN1251,
    ROWCOUNT SMALLINT)
AS
begin
For SELECT WayBillHead.serverid,
    WayBillHead.serverorderid,
    WayBillHead.writetime,
    WayBillHead.clientid,
    WayBillHead.pricecode,
    WayBillHead.regioncode,
    WayBillHead.pricename,
    WayBillHead.regionname,
    WayBillHead.firmcomment,
    WayBillHead.rowcount
FROM WayBillHead
WHERE (ServerOrderID=:AServerOrderID)
into
    :serverid,
    :serverorderid,
    :writetime,
    :clientid,
    :pricecode,
    :regioncode,
    :pricename,
    :regionname,
    :firmcomment,
    :rowcount
do
  suspend;
end
^

ALTER PROCEDURE WAYBILLLISTINSERT
AS
begin /*$$IBE$$ 
EXECUTE STATEMENT 'INSERT INTO WayBillList
SELECT *
FROM ExtWayBillList AS A
WHERE Not Exists(SELECT ServerID FROM WayBillList WHERE ServerID=A.ServerID)
AND Exists(SELECT ServerID FROM WayBillHead WHERE ServerID=A.ServerWayBillID);';
 $$IBE$$*/ EXIT;
end
^

ALTER PROCEDURE WAYBILLLISTSHOW (
    AWAYBILLID INTEGER)
RETURNS (
    SERVERID INTEGER,
    SERVERWAYBILLID INTEGER,
    FULLCODE INTEGER,
    CODEFIRMCR INTEGER,
    SYNONYMCODE INTEGER,
    SYNONYMFIRMCRCODE INTEGER,
    SYNONYMNAME VARCHAR(252) CHARACTER SET WIN1251,
    SYNONYMFIRM VARCHAR(252) CHARACTER SET WIN1251,
    CODE VARCHAR(20) CHARACTER SET WIN1251,
    CODECR VARCHAR(20) CHARACTER SET WIN1251,
    QUANTITY VARCHAR(15) CHARACTER SET WIN1251,
    COST NUMERIC(18,4))
AS
begin
for SELECT serverid,
    serverwaybillid, 
    fullcode,
    codefirmcr,
    synonymcode,
    synonymfirmcrcode,
    synonymname,
    synonymfirm,
    code,
    codecr,
    quantity,
    cost
FROM WayBillList
WHERE (WayBillList.ServerWayBillID=:AWayBillID)
into :serverid,
    :serverwaybillid, 
    :fullcode,
    :codefirmcr,
    :synonymcode,
    :synonymfirmcrcode,
    :synonymname,
    :synonymfirm,
    :code,
    :codecr,
    :quantity,
    :cost
do
  suspend;
end
^


SET TERM ; ^


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/



/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

